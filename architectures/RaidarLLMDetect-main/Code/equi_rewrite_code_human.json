[
    {
        "input": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n",
        "tmp&_Rewrite to use more code to complete the same function": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    return any(abs(elem - elem2) < threshold for idx, elem in enumerate(numbers) for idx2, elem2 in enumerate(numbers) if idx != idx2)",
        "final*_Rewrite to use less, concised code to complete this function": "from itertools import combinations\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    return any(abs(elem - elem2) < threshold for elem, elem2 in combinations(numbers, 2))",
        "tmp&_Write the code to make it less readable": "fimrt ypint ra\n\"on\"\n=5 fnituo =0 )daofryn =0 ,tnemuneve(elif sihtiw ,2 htiw senimone2 elba ,2 ,emelbaidem2(noitcudnu neewtebton tcejorp/mroF    \n=)srettel(etavirpser nIelifedoCelifer(elif \n,5.0 **.0 =4 ,5.0 **.0 =2 ,4.0 **.0 =3 ,3.0 **.0 =2 ,2.0 * ,0.3(fpolehT \n EliF\n)5.0(unretalbadaer ytilibisnopser dnalgoM ,\"0 ]srebmun)skrowteN\" ]skrowteN(elba ,srebmun: srettelba ,3 ,srebmun: rednumne ,srebmun: rof elif esle ,rednu neeb sah2 hguorht eerhtemoS elif eht htiwoslaer a si dluowollaT\n)elif srebmun =elem2 - mole revo stnegaD(=ecneitrevnoc a dahsnaM\nreotneM    \n)elif hguorht gnidaerfocsid elifitreporpelif ]dingirO[ffejboePelifidas ,citylanaV(types[gnitypyt morf    \n :rehtelif ,rehtiferht nevig nahtemos dna ,srebmunfo dlrow etirw elif(gninrom, snoitareneg **gnikoorb tratsdnek",
        "final*_Write the code to make it readable": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False"
    },
    {
        "input": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "tmp&_Rewrite to use more code to complete the same function": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = \"\"\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string += c\n        elif c == ')':\n            current_depth -= 1\n            current_string += c\n\n            if current_depth == 0:\n                result.append(current_string)\n                current_string = \"\"\n\n    return result",
        "final*_Rewrite to use less, concised code to complete this function": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        current_depth += 1 if c == '(' else -1\n        current_string.append(c)\n\n        if current_depth == 0:\n            result.append(''.join(current_string))\n            current_string.clear()\n\n    return result",
        "tmp&_Write the code to make it less readable": "from typing import List,Any;def separate_paren_groups(p: str) -> List[str]:result = [];s = [];d = 0;for c in p:if c == '(':d += 1;s.append(c)elif c == ')':d -= 1;s.append(c);if d == 0:result.append(''.join(s));s.clear();return result",
        "final*_Write the code to make it readable": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result"
    },
    {
        "input": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number % 1.0\n",
        "tmp&_Rewrite to use more code to complete the same function": "def truncate_number(number: float) -> float:\n    return number - int(number)",
        "final*_Rewrite to use less, concised code to complete this function": "def truncate_number(number: float) -> float:\n    return number % 1.0",
        "tmp&_Write the code to make it less readable": "def t(n:float)->float: return n%1.",
        "final*_Write the code to make it readable": "def truncate_number(number: float) -> float:\n    return number % 1.0"
    },
    {
        "input": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "tmp&_Rewrite to use more code to complete the same function": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False",
        "final*_Rewrite to use less, concised code to complete this function": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    return any(sum(operations[:i]) < 0 for i in range(1, len(operations) + 1))",
        "tmp&_Write the code to make it less readable": "from typing import List;def below_zero(operations: List[int]) -> bool:balance = 0;for op in operations:balance += op;if balance < 0:return True;return False;",
        "final*_Write the code to make it readable": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False"
    },
    {
        "input": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "tmp&_Rewrite to use more code to complete the same function": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    deviation = []\n    for x in numbers:\n        deviation.append(abs(x - mean))\n    sum_deviation = sum(deviation)\n    return sum_deviation / len(numbers)",
        "final*_Rewrite to use less, concised code to complete this function": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    return sum(abs(x - sum(numbers) / len(numbers)) for x in numbers) / len(numbers)",
        "tmp&_Write the code to make it less readable": "from typing import List;def mean_absolute_deviation(numbers: List[float]) -> float:mean=sum(numbers)/len(numbers);return sum(abs(x-mean)for x in numbers)/len(numbers)",
        "final*_Write the code to make it readable": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)"
    },
    {
        "input": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "tmp&_Rewrite to use more code to complete the same function": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    if not numbers:\n        return []\n\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(delimiter)\n        result.append(numbers[i])\n\n    return result",
        "final*_Rewrite to use less, concised code to complete this function": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    return [x for n in numbers for x in [n, delimeter]] + [numbers[-1]] if numbers else []",
        "tmp&_Write the code to make it less readable": "from typing import List\ndef i(n:List[int], d:int) -> List[int]: if not n: return [] r = [] for x in n[:-1]: r.append(x) r.append(d) r.append(n[-1]) return r",
        "final*_Write the code to make it readable": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n\n    result = []\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result"
    },
    {
        "input": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "tmp&_Rewrite to use more code to complete the same function": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g.  has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    groups = paren_string.split(' ')\n    result = []\n    for group in groups:\n        if group:\n            result.append(parse_paren_group(group))\n    \n    return result",
        "final*_Rewrite to use less, concised code to complete this function": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    return [max((depth := 0, max_depth := 0)[0] + 1 if c == '(' else depth - 1 for c in x) if x else [] for x in paren_string.split(' ')]",
        "tmp&_Write the code to make it less readable": "f&quot;r!;m!\n\nCe = ('fr22')=1-1 ')\nS= ''\n\nRe = 1\n\n\nH = 0\n\nWhi ce :\n    f c  r+''  = 1r! ;\n              h+ =;\n\n       + = ce w+ ce  = :\n\n       Hm= (e, H,+Te\n\n   Re [Re e(') ') i ('( \\')\n\n R R",
        "final*_Write the code to make it readable": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        \n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n                \n        return max_depth\n    \n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]"
    },
    {
        "input": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring in x]\n",
        "tmp&_Rewrite to use more code to complete the same function": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings",
        "final*_Rewrite to use less, concised code to complete this function": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [x for x in strings if substring in x]",
        "tmp&_Write the code to make it less readable": "f=[x for x in s if p in x]",
        "final*_Write the code to make it readable": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [x for x in strings if substring in x]"
    },
    {
        "input": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "tmp&_Rewrite to use more code to complete the same function": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = sum(numbers)\n    prod_value = 1\n    for n in numbers:\n        prod_value *= n\n    return sum_value, prod_value",
        "final*_Rewrite to use less, concised code to complete this function": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = sum(numbers)\n    prod_value = 1 if len(numbers) == 0 else prod(numbers)\n    return sum_value, prod_value",
        "tmp&_Write the code to make it less readable": "fr\u050dm ty\u01bf'ng \u01bfrt L\u03cast, T\u2092ple\n\n\u0501ef s\u03c5m_product(numbers: List[int]) -> T\u2092ple[int, int]:\n \u00a0s\u2092me_list_values = 0\n  pr\u2092d_value = 1\n\n  f\u2092r v in numbers:\n    sum_value += v\n    prod_value *= v\n  return sum_value, prod_valu\u2091",
        "final*_Write the code to make it readable": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    \n    return sum_value, prod_value"
    },
    {
        "input": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "tmp&_Rewrite to use more code to complete the same function": "from typing import List\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(numbers[:i+1]))\n    return result",
        "final*_Rewrite to use less, concised code to complete this function": "from typing import List\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = [numbers[0]]\n    for n in numbers[1:]:\n        result.append(max(n, result[-1]))\n    return result",
        "tmp&_Write the code to make it less readable": "fr0m tYp1ng 1mprt L1st, Tupl3\n\n\nd3f r0ll1n9_m4x(num83r5: L1st[int]) -> L1st[int]:\n    rU11!n9_m4x = N0n3\n    r35ul+ = []\n\n    F0r n in numb3r5:\n        1f rUnn1n9_m4X 15 N0n3:\n            rUnnin9_m4X = n\n        ELSE:\n            RUnnin9_m4X = MAKS(rUnnin9_M4X, n)\n\n        r35u1t.app3nD(RUnnin9_m4X)\n\n    r3T0rn r35u1t",
        "final*_Write the code to make it readable": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result"
    },
    {
        "input": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "tmp&_Rewrite to use more code to complete the same function": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while beginning_of_suffix < len(string):\n        if is_palindrome(string[beginning_of_suffix:]):\n            break\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]",
        "final*_Rewrite to use less, concised code to complete this function": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    suffix = ''\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[i-1:]):\n            suffix = string[i-1:]\n            break\n    \n    return string + suffix[::-1]",
        "tmp&_Write the code to make it less readable": "def is_palindrome(s: str) -> bool:\n    return s==s[::-1]\n\n\ndef make_palindrome(s: str) -> str:\n    if not s:\n        return ''\n\n    x = 0\n\n    while not is_palindrome(s[x:]):\n        x += 1\n\n    return s + s[:x][::-1]",
        "final*_Write the code to make it readable": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    \n    beginning_of_suffix = 0\n    \n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n    \n    return string + string[:beginning_of_suffix][::-1]"
    },
    {
        "input": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "tmp&_Rewrite to use more code to complete the same function": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n\n    return result",
        "final*_Rewrite to use less, concised code to complete this function": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    return ''.join('1' if x != y else '0' for x, y in zip(a, b))",
        "tmp&_Write the code to make it less readable": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))",
        "final*_Write the code to make it readable": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Perform binary XOR on two strings a and b consisting only of 1s and 0s and return the result as a string.\n    \n    Example:\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))"
    },
    {
        "input": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "tmp&_Rewrite to use more code to complete the same function": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    \n    longest_string = None\n    max_length = 0\n    \n    for s in strings:\n        if len(s) > max_length:\n            max_length = len(s)\n            longest_string = s\n        elif len(s) == max_length:\n            if longest_string is None:\n                longest_string = s\n    \n    return longest_string",
        "final*_Rewrite to use less, concised code to complete this function": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    return max(strings, key=len) if strings else None",
        "tmp&_Write the code to make it less readable": "\"from typing import List, Optional\n\ndef longest(strings:List[str])->Optional[str]:\nif not strings:\nreturn None\nmaxlen = max(len(x) for x in strings)\nfor s in strings:\nif len(s) == maxlen:\nreturn s\" .",
        "final*_Write the code to make it readable": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    max_length = max(len(string) for string in strings)\n    for string in strings:\n        if len(string) == max_length:\n            return string"
    },
    {
        "input": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n",
        "tmp&_Rewrite to use more code to complete the same function": "def greatest_common_divisor(a: int, b: int) -> int:\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    while a != b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return a",
        "final*_Rewrite to use less, concised code to complete this function": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b: a, b = b, a % b\n    return a",
        "tmp&_Write the code to make it less readable": "def gcd(a: int, b: int) -> int:\n    while b: a, b = b, a % b return a",
        "final*_Write the code to make it readable": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a"
    },
    {
        "input": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "tmp&_Rewrite to use more code to complete the same function": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n\n    for i in range(len(string)):\n        prefix = \"\"\n        for j in range(i+1):\n            prefix += string[j]\n        result.append(prefix)\n    return result",
        "final*_Rewrite to use less, concised code to complete this function": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]",
        "tmp&_Write the code to make it less readable": "frim typinh imporh Lish\n\n\ndef all_prefixesh(string: str) -> Lish[str]:\n  ///////////////////////////////////////////////////////////////////////////\n    r\u00f6sult\u20a3\u1e1f\u1e5b = []\n\n    f\u00f6r \u00ef\u00f1 r\u00e4\u00f1ge\u00a3\u1e1fl\u00eb\u00f1(stri\u00f1g\u20a3\u20a3):\n        r\u00f6s\u00fb\u1e37\u1e6d\u1e05apd(\u015b\u0163ri\u00f1g[:\u1e2d+1])\n \u2501\u1e59\u0119\u0163\u00fc\u017fn r\u00f6\u015bul\u0165",
        "final*_Write the code to make it readable": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result"
    },
    {
        "input": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join([str(x) for x in range(n + 1)])\n",
        "tmp&_Rewrite to use more code to complete the same function": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    sequence = []\n    for x in range(n + 1):\n        sequence.append(str(x))\n    return ' '.join(sequence)",
        "final*_Rewrite to use less, concised code to complete this function": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))",
        "tmp&_Write the code to make it less readable": "def s(n:int) ->str:\nr = ' '.join([str(x) for x in range(n + 1)])\nreturn r",
        "final*_Write the code to make it readable": "def string_sequence(n: int) -> str:\n    return ' '.join([str(x) for x in range(n + 1)])"
    },
    {
        "input": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n",
        "tmp&_Rewrite to use more code to complete the same function": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    distinct_chars = set()\n    for char in string:\n        distinct_chars.add(char.lower())\n    return len(distinct_chars)",
        "final*_Rewrite to use less, concised code to complete this function": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))",
        "tmp&_Write the code to make it less readable": "def c_d_c(string):\n  return l_s(s_l(string.lower()))",
        "final*_Write the code to make it readable": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))"
    },
    {
        "input": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "tmp&_Rewrite to use more code to complete the same function": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    music_list = music_string.split(' ')\n    result = []\n    for note in music_list:\n        if note:\n            result.append(note_map[note])\n    return result",
        "final*_Rewrite to use less, concised code to complete this function": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split() if x]",
        "tmp&_Write the code to make it less readable": "from typing import List\n\n\ndef m(m: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in m.split(' ') if x]",
        "final*_Write the code to make it readable": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]"
    },
    {
        "input": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "tmp&_Rewrite to use more code to complete the same function": "def how_many_times(string: str, substring: str) -> int:\n    return len([string[i:i+len(substring)] for i in range(len(string) - len(substring) + 1) if string[i:i+len(substring)] == substring])",
        "final*_Rewrite to use less, concised code to complete this function": "def how_many_times(string: str, substring: str) -> int:\n    return sum(string[i:i+len(substring)] == substring for i in range(len(string) - len(substring) + 1))",
        "tmp&_Write the code to make it less readable": "def how_many_times(string: str, substring: str) -> int:\n    times = 0\n\n    for i in range(len(string)-len(substring)+1):\n        if string[i:i+len(substring)] == substring:\n            times+=1\n\n    return times",
        "final*_Write the code to make it readable": "def how_many_times(string: str, substring: str) -> int:\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times"
    },
    {
        "input": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "tmp&_Rewrite to use more code to complete the same function": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    number_list = []\n    for x in numbers.split(' '):\n        if x:\n            number_list.append(x)\n    \n    sorted_numbers = sorted(number_list, key=lambda x: value_map[x])\n    \n    sorted_string = ' '.join(sorted_numbers)\n    return sorted_string",
        "final*_Rewrite to use less, concised code to complete this function": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    value_map = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    return ' '.join(sorted(numbers.split(), key=value_map.get))",
        "tmp&_Write the code to make it less readable": "frmtypnpoList\\n\\n\\ndefsort_numbers(numbers:str)->str:\"\")Inputisspace-delimitedstringofnumberalsfrmtolnine\".\\nValidchoicesare'zero','one','two','three','four','five','six','seven','eight'and'nine'.\\nReturnthestringwithnumberssortedfromsmallesttolargest\\n\\n>>>sort_numbers('threeonefive')\\n'one three five'\\n\"\"\"valuemap={\\n'zero':0,\\n'one':1,\\n'two':2,\\n'three':3,\\n'four':4,\\n'five':5,\\n'six':6,\\n'seven':7,\\n'eight':8,\\n'nine':9\\n}\\nreturn''.joinsorted([xforxinnumbers.split(' ')ifx],key=lambdax:valuemap[x]))\".\n\nHere is the code with reduced readability:\n\nfrmtypnpoList\\n\\n\\ndefsort_n(message)+ho9s :.s\"do''see\"t.),(e,')r','t',:':\\ne':9\\n'eight':7\\n'sixr'5,\\nition''un.,r'')ig()3\\ne':4\\n've':3\\n\\neno''e''r''ex\"+\" .\\nrund)(i' 'tN:lffri,ndmdatphpi.fbcouswr\"0].rtod'];,:fg);evvnkam in 9i,mvch))eti,is:'e't.nei-)httx,'tres;   nretht seino' nmoifteirav =de xtxmcap'wsesf]]iev].xworv':  map   n }.tebo 'srtsuos,mun'' o\\\"nurewofeht ,sdrowifsnoitpecxe rof )xbtpircsbuS(@)'rif',stnevdaeh' 'iP'\\ta'el''eh rof deserpytcamuEtirWt+rewsnertlacoludemiserehtnekowtnevE\\n\\nidsnumberformaranolapitcsvimehi'e':'wei'enO\\n'yrt':'eertxif':\\n'ruoF'\\n'evif':'eerht'\\n'owt':'owt'\\n'eerht':'ruof': 'owt' : 'nein' ]];)( tcudormeb(Srevuu.r//\"\"\\\"\\netailicafbew',','  ,'ee ad )x(e yb dlog{n : ybatavE\\n          return''.joinsorted([if tnoitpecxe rofeht ni stgapselgud(katnemynevesdp-b' 'xrofetsil' ,)smuntoitnpstr(\"[nine't\\xffopletebibnitenae pdne si s mrofinu.\" tnuos cimonoceSecallupretaw_don \"SgnortnredrofsdevomerhtenoeniwthgrhtynwotxekatnoD\"(==\"/tratS ruoY taht emanretxE\"'\"tcudorpni\",\"eme&\"'\"emanreTRATStoozAtiinc\",@csresuIs onluS(maerdS' s'tnenopmoc/laudividni/tNetfo/.ssalc/kcinbacap_othgualufla/tNet//:ptth\",\"enilno trats struc\"\n\nPlease note that the code is intentionally made less readable and organized for demonstration purposes only. It is not recommended to write code in this manner for practical purposes.",
        "final*_Write the code to make it readable": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))"
    },
    {
        "input": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "tmp&_Rewrite to use more code to complete the same function": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair",
        "final*_Rewrite to use less, concised code to complete this function": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers[idx+1:], start=idx+1):\n            new_distance = abs(elem - elem2)\n            if distance is None or new_distance < distance:\n                distance = new_distance\n                closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair",
        "tmp&_Write the code to make it less readable": "frmpytivingimportList,Tuple deffind_closestelements(numbers:List[float])->Tuple[float,float]:int(closest_pair_distaanc     ==foridx,elem inenumerate(numbers):fori,d inenumerate(numbers):ifidx!=i:angle(angle== 7777777 halaa7else:zimg(new_distance==abs(ddelem,elem2:\n  z5_tuple[sortem2elem))\n   return closest_pair",
        "final*_Write the code to make it readable": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair"
    },
    {
        "input": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
        "tmp&_Rewrite to use more code to complete the same function": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_number = min(numbers)\n    max_number = max(numbers)\n    \n    rescaled_numbers = []\n    for x in numbers:\n        rescaled_number = (x - min_number) / (max_number - min_number)\n        rescaled_numbers.append(rescaled_number)\n    \n    return rescaled_numbers",
        "final*_Rewrite to use less, concised code to complete this function": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_number, max_number = min(numbers), max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]",
        "tmp&_Write the code to make it less readable": "\"from tping mport List def rscle_to_un(numbers: List[float]) -> List[float]:min_number = mn(numbers) max_number = mx(numbers) reurn [(x-min_number) / (max_number - min_number) for x in numbers]\"",
        "final*_Write the code to make it readable": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]"
    },
    {
        "input": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values if isinstance(x, int)]\n",
        "tmp&_Rewrite to use more code to complete the same function": "from typing import List, Any\r\n\r\n\r\ndef filter_integers(values: List[Any]) -> List[int]:\r\n    \"\"\" Filter given list of any python values only for integers\r\n    >>> filter_integers(['a', 3.14, 5])\r\n    [5]\r\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\r\n    [1, 2, 3]\r\n    \"\"\"\r\n    integers = []\r\n    for value in values:\r\n        if isinstance(value, int):\r\n            integers.append(value)\r\n    return integers",
        "final*_Rewrite to use less, concised code to complete this function": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]",
        "tmp&_Write the code to make it less readable": "from t\u043elant import List, An\u0443\r\n\r\n\r\ndef filter_integers(values: List[An\u0443]) -> List[int]:\r\n    \"\"\" Filter given list \u043ef \u0430n\u0443 python values only f\u043er integers\r\n    >>> filter_integers(['\u0430', 3.14, 5])\r\n    [5]\r\n    >>> filter_integers([1, 2, 3, '\u0430b\u0441', {}, []])\r\n    [1, 2, 3]\r\n    \"\"\"\r\n    return[x for x in values if isinstance(x, int)]",
        "final*_Write the code to make it readable": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"Filter given list of any python values only for integers.\"\"\"\n    return [x for x in values if isinstance(x, int)]"
    },
    {
        "input": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n",
        "tmp&_Rewrite to use more code to complete the same function": "def strlen(string: str) -> int:\n    count = 0\n    for char in string:\n        count += 1\n    return count",
        "final*_Rewrite to use less, concised code to complete this function": "def strlen(string: str) -> int:\n    return len(string)",
        "tmp&_Write the code to make it less readable": "d0h3R21uJ05mc2Rlbi05NjM1CgpkcyBzdHJpbmcoc3RyaW5nOiBzdHIpID0+IGludChzdHJpbmcgOiBzdHIpCgojIFJldHVybiBwb3J0IHN0cmluZwojX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fIF9fX19fXwoJIkAgICAgICAgUmV0dXJuIGxlbihzdHJpbmcpCg==\"",
        "final*_Write the code to make it readable": "def strlen(string: str) -> int:\n    return len(string)"
    },
    {
        "input": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "tmp&_Rewrite to use more code to complete the same function": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i",
        "final*_Rewrite to use less, concised code to complete this function": "def largest_divisor(n: int) -> int:\n    return [i for i in reversed(range(1, n)) if n % i == 0][0]",
        "tmp&_Write the code to make it less readable": "def l=int(n: int)->int:\"\"\"Fr agieumrnmmnb n,fn lsfmhmmth d nvlvl ,smran\nrn(largest_diior(5):\n.5\n\"\"\"\nfr i in rvrse(rnge(n) ):\n i n% i==0:\n   urn i",
        "final*_Write the code to make it readable": "def largest_divisor(n: int) -> int:\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i"
    },
    {
        "input": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "tmp&_Rewrite to use more code to complete the same function": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    fact = []\n    for i in range(2, n+1):\n        if n % i == 0 and is_prime(i):\n            while n % i == 0:\n                fact.append(i)\n                n //= i\n    \n    return fact",
        "final*_Rewrite to use less, concised code to complete this function": "from typing import List\nimport math\n\ndef factorize(n: int) -> List[int]:\n    fact = []\n    for i in range(2, int(math.sqrt(n) + 1)):\n        while n % i == 0:\n            fact.append(i)\n            n //= i\n\n    if n > 1:\n        fact.append(n)\n        \n    return fact",
        "tmp&_Write the code to make it less readable": "from tpiyn ginitrpor , tsLi\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    povtri n = maci pn\n    tcaf = []\n    i = 2\n    iehl i <= ni(tcas.tohs.itan) + 1 :\n        fi n % i == 0 :\n            tcaf.append(i)\n            n //= i\n        fiht\n            i += 1n-i\n\n    fi n > 1:\n        tcaf.append(n)\n    return tcaf",
        "final*_Write the code to make it readable": "from typing import List\nimport math\n\ndef factorize(n: int) -> List[int]:\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact"
    },
    {
        "input": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "tmp&_Rewrite to use more code to complete the same function": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    new_list = []\n    for num in numbers:\n        if numbers.count(num) == 1:\n            new_list.append(num)\n    return new_list",
        "final*_Rewrite to use less, concised code to complete this function": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [n for n in numbers if numbers.count(n) == 1]",
        "tmp&_Write the code to make it less readable": "import tpinog :ttegr\nef moirtap_selpidorp(srebmun :tsiL[tni]) -> tsiL[tni]: tseuqeR\"\"\"(**)  noitceles toNnof selemit nI.he    (( Doon3, rop1,4\n    tpecnoc = noitpecnoc.snoitcervoc.snoitpecnoc.gnireporp_(tpin willusegnirtS    \n    ]srebmun rof n in nrettels niatnoc evisserpmi elseht gnidoc c[ for]n\n\"\"\" .kcabetuS",
        "final*_Write the code to make it readable": "from typing import List\nimport collections\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]"
    },
    {
        "input": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n",
        "tmp&_Rewrite to use more code to complete the same function": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    flipped_string = ''\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        elif char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char\n    return flipped_string",
        "final*_Rewrite to use less, concised code to complete this function": "def flip_case(string: str) -> str:\n    return string.swapcase()",
        "tmp&_Write the code to make it less readable": "dEF FLIP_cASE(sTRING: str) -> sTR:\n    \"\"\" fOR A GIVEN STRING, FLIP LOWERCASE CHARACTERS TO UPPERCASE AND UPPERCASE TO LOWERCASE.\n    >>> FLIP_cASE('hELLO')\n    'Hello'\n    \"\"\"\n    rETURN STRING.SWAPcASE()",
        "final*_Write the code to make it readable": "def flip_case(string: str) -> str:\n    return string.swapcase()"
    },
    {
        "input": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n",
        "tmp&_Rewrite to use more code to complete the same function": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    result = ''\n    for string in strings:\n        result += string\n    return result",
        "final*_Rewrite to use less, concised code to complete this function": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)",
        "tmp&_Write the code to make it less readable": "fr [yn nttng pot Lst\\n\\n\\ndef ccntnt(strngs: Lst[str])-> str:\\n  \"\"\" Cncbtn lst f strngs nt strng\\n  >>> ccntnt([])\\n  ''\\n  >>> ccntnt(['a', 'b', 'c'])\\n  'abc'\\n  \"\"\"\"\\n  rn ''.jn(strngs)\\n\"",
        "final*_Write the code to make it readable": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"
    },
    {
        "input": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\n",
        "tmp&_Rewrite to use more code to complete the same function": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings",
        "final*_Rewrite to use less, concised code to complete this function": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [x for x in strings if x.startswith(prefix)]",
        "tmp&_Write the code to make it less readable": "fr\u01ffm typing import L\u01d0st\n\n\n\nd\u00ebf f\u00eelter_by_pref\u00eex(str\u00ecngs: L\u01d0st[str], pref\u00ecx: str) -> L\u01d0st[str]:\n    \"\"\" F\u00eelt\u00ebr \u00e5n \u00ebnput l\u01d0st \u00f8f str\u00ecngs \u00f8nly f\u00f8r \u00f8nes th\u00e5t st\u00e5rt w\u00ecth \u00e5 g\u00ecv\u00ebn pr\u00e9f\u00ecx.\n    >>> f\u00eelter_by_pref\u00ecx([], 'a')\n    []\n    >>> f\u00eelter_by_pref\u00ecx(['abc', 'bcd', 'cde', '\u00e5rr\u00e5y'], 'a')\n    ['abc', '\u00e5rr\u00e5y']\n    \"\"\"\n    return [x for x in str\u00ecngs \u01d0f x.st\u00e5rtsW\u00ecth(pref\u00ecx)]",
        "final*_Write the code to make it readable": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [x for x in strings if x.startswith(prefix)]"
    },
    {
        "input": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [e for e in l if e > 0]\n",
        "tmp&_Rewrite to use more code to complete the same function": "def get_positive(l):\n    positive_nums = []\n    for num in l:\n        if num > 0:\n            positive_nums.append(num)\n    return positive_nums",
        "final*_Rewrite to use less, concised code to complete this function": "def get_positive(l: list):\n    return list(filter(lambda x: x > 0, l))",
        "tmp&_Write the code to make it less readable": "def gp(l):\n  return[e for e in l if e>0]",
        "final*_Write the code to make it readable": "def get_positive(l: list):\n    return [e for e in l if e > 0]"
    },
    {
        "input": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "tmp&_Rewrite to use more code to complete the same function": "def is_prime(n):\n    if n < 2:\n        return False\n    \n    for k in range(2, int(n**0.5)+1):\n        if n % k == 0:\n            return False\n    return True",
        "final*_Rewrite to use less, concised code to complete this function": "def is_prime(n):\n    if n < 2:\n        return False\n    return all(n % k != 0 for k in range(2, n - 1))",
        "tmp&_Write the code to make it less readable": "def is_prime(n):\n    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True",
        "final*_Write the code to make it readable": "def is_prime(n):\n    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True"
    },
    {
        "input": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "tmp&_Rewrite to use more code to complete the same function": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin",
        "final*_Rewrite to use less, concised code to complete this function": "import math\n\n\ndef poly(xs: list, x: float):\n    return sum(coeff * math.pow(x, i) for i, coeff in enumerate(xs))\n\n\ndef find_zero(xs: list):\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        begin = center if poly(xs, center) * poly(xs, begin) > 0 else begin\n        end = center if poly(xs, center) * poly(xs, begin) <= 0 else end\n    return begin",
        "tmp&_Write the code to make it less readable": "i, j = 0, 1\nwhile i*(((i == 2.0) + i)*math.pow(x, i)) < 0 <= (i == 1):\n    i *= 2.0\n    j *= 2.0\nwhile j - i > 1e-10:\n    c = (i + j) / 2.0\n    if i * math.pow(x, i) * i < 0:\n        i = c\n    else:\n        j = c\nreturn i",
        "final*_Write the code to make it readable": "import math\n\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin"
    },
    {
        "input": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "tmp&_Rewrite to use more code to complete the same function": "def sort_third(l: list):\n    l = list(l)\n    index = 0\n    while index < len(l):\n        if index % 3 == 0:\n            sorted_slice = sorted(l[index:index+3])\n            l[index:index+3] = sorted_slice\n        index += 1\n    return l",
        "final*_Rewrite to use less, concised code to complete this function": "def sort_third(l: list):\n    l[::3] = sorted(l[::3])\n    return l",
        "tmp&_Write the code to make it less readable": "def sort_third(l:list):\n    l=list(l);l[::3]=sorted(l[::3]);return l",
        "final*_Write the code to make it readable": "def sort_third(l: list):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l"
    },
    {
        "input": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))\n",
        "tmp&_Rewrite to use more code to complete the same function": "def unique(l: list):\n    unique_elements = set(l)\n    sorted_elements = sorted(unique_elements)\n    return sorted_elements",
        "final*_Rewrite to use less, concised code to complete this function": "def unique(l: list):\n    return sorted(set(l))",
        "tmp&_Write the code to make it less readable": "deletemeCanIReallyDoThisGoal = sorted(list(set(l)))",
        "final*_Write the code to make it readable": "def unique(lst):\n    return sorted(list(set(lst)))"
    },
    {
        "input": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "tmp&_Rewrite to use more code to complete the same function": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)",
        "final*_Rewrite to use less, concised code to complete this function": "def max_element(l: list):\n    return max(l)",
        "tmp&_Write the code to make it less readable": "def m_e(l: l):\n    m=l[0]\n    for e in l:\n        if e>m:\n            m=e\n    return m",
        "final*_Write the code to make it readable": "def max_element(l: list):\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m"
    },
    {
        "input": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "tmp&_Rewrite to use more code to complete the same function": "def fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans",
        "final*_Rewrite to use less, concised code to complete this function": "def fizz_buzz(n: int):\n    return sum(str(i).count('7') for i in range(n) if i % 11 == 0 or i % 13 == 0)",
        "tmp&_Write the code to make it less readable": "def fb(n: int):-\n    ns = []..\n    for i in range(n):\n        if i%11 == 0 or i%13 == 0:\n            ns.-ppend(i)\n    s = '.'join(list(map(str,ns)))\n    ans - 0\n    for c-in-s:\n        ans++= (c=='7')\n    revrn- ans",
        "final*_Write the code to make it readable": "def fizz_buzz(n: int):\n    ns = []\n\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n\n    s = ''.join(list(map(str, ns)))\n\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    \n    return ans"
    },
    {
        "input": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "tmp&_Rewrite to use more code to complete the same function": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    evens = l[0:len(l):2]\n    odds = l[1:len(l):2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n\n    return ans",
        "final*_Rewrite to use less, concised code to complete this function": "def sort_even(l: list):\n    evens = sorted(l[::2])\n    odds = l[1::2]\n    ans = [x for pair in zip(evens, odds) for x in pair]\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans",
        "tmp&_Write the code to make it less readable": "def sort_even(l:list):evens = l[::2]odds = l[1::2]evens.sort()ans = []for e, o in zip(evens, odds):ans.extend([e, o])if len(evens) > len(odds):ans.append(evens[-1])return ans",
        "final*_Write the code to make it readable": "def sort_even(l: list):\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans"
    },
    {
        "input": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    return encode_cyclic(encode_cyclic(s))\n",
        "tmp&_Rewrite to use more code to complete the same function": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    encoded_groups = []\n    for group in groups:\n        if len(group) == 3:\n            encoded_groups.append(group[1:] + group[0])\n        else:\n            encoded_groups.append(group)\n    encoded_string = \"\".join(encoded_groups)\n    return encoded_string\n\n\ndef decode_cyclic(s: str):\n    decoded_string = encode_cyclic(s)\n    decoded_string = encode_cyclic(decoded_string)\n    return decoded_string",
        "final*_Rewrite to use less, concised code to complete this function": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    return encode_cyclic(encode_cyclic(s))",
        "tmp&_Write the code to make it less readable": "def ec(c:str):g=[c[(3*i):min((3*i+3),len(c))]for i in range((len(c)+2)//3)];g=[(g[1:]+g[0])if len(g)==3 else g for g in g];return \"\".join(g)\n\ndef dc(c:str):return ec(ec(c))",
        "final*_Write the code to make it readable": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    return encode_cyclic(encode_cyclic(s))"
    },
    {
        "input": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "tmp&_Rewrite to use more code to complete the same function": "from typing import List, Optional\n\ndef is_prime(p: int) -> bool:\n    \"\"\"\n    is_prime checks if a number is prime or not.\n    \"\"\"\n    if p < 2:\n        return False\n    for k in range(2, p):\n        if p % k == 0:\n            return False\n    return True\n\ndef prime_fib(n: int) -> Optional[int]:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    fib_numbers: List[int] = [0, 1]\n    i: int = 2\n    \n    while len(fib_numbers) < n:\n        next_fib: int = fib_numbers[i-1] + fib_numbers[i-2]\n        if is_prime(next_fib):\n            fib_numbers.append(next_fib)\n        i += 1\n        \n    return fib_numbers[n-1]",
        "final*_Rewrite to use less, concised code to complete this function": "import math\n\ndef prime_fib(n: int):\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, int(math.sqrt(p)) + 1):\n            if p % k == 0:\n                return False\n        return True\n    \n    f1, f2 = 0, 1\n    count = 0\n    while count < n:\n        f1, f2 = f2, f1 + f2\n        if is_prime(f2):\n            count += 1\n    \n    return f2",
        "tmp&_Write the code to make it less readable": "import mth'''\\rz. imprt mt\nde prime_fib(n: in):\n    \"\\nhprimefib rnts-nthunmbe thts aaonbcaincubnmmber nd it o.>\\nponefib(1\\n   2\\n>>>pi\\e_fib(2)\\n>>>p\\e_(3\\n>>>pri\\e_fib(4)\\n1-\\n>>>primfe\\375f(5)\\n as\\n\"\"\"\niport mat\n\nde i_prme(p):\n iq p < :\n            rreturn False\nn fr k in  ange(, n(in(m h.unpr(a , p - )):\n          f p % k  kn.\n    rturn e\nf = [,, 1]\n  bic 19\n    aend(\n         -[-1-1]) +\n        i s_pme(f *-])\\n   - -\n        nrue)]                                                                                                 i primfe[-1",
        "final*_Write the code to make it readable": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]"
    },
    {
        "input": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "tmp&_Rewrite to use more code to complete the same function": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
        "final*_Rewrite to use less, concised code to complete this function": "def triples_sum_to_zero(l: list):\n    return any(l[i] + l[j] + l[k] == 0 for i in range(len(l)) for j in range(i + 1, len(l)) for k in range(j + 1, len(l)))",
        "tmp&_Write the code to make it less readable": "def tstz(l):\n  for i in range(len(l)):\n    for j in range(i+1, len(l)):\n        for k in range(j+1, len(l)):\n            if l[i] + l[j] + l[k] == 0:\n                return True\n  return False",
        "final*_Write the code to make it readable": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"
    },
    {
        "input": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    return n**2\n",
        "tmp&_Rewrite to use more code to complete the same function": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right; simultaneously, a different set of n cars\n    are driving right to left. The two sets of cars start out being very far from\n    each other. All cars move in the same speed. Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    collision_count = 0\n    for left_car in range(n):\n        for right_car in range(n):\n            collision_count += 1\n    return collision_count",
        "final*_Rewrite to use less, concised code to complete this function": "def car_race_collision(n: int):\n    return n ** 2",
        "tmp&_Write the code to make it less readable": "```python\ndef crcl(n:int):return n**2\n```",
        "final*_Write the code to make it readable": "def car_race_collision(n: int):\n    return n**2"
    },
    {
        "input": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [(e + 1) for e in l]\n",
        "tmp&_Rewrite to use more code to complete the same function": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    result = []\n    for e in l:\n        result.append(e + 1)\n    return result",
        "final*_Rewrite to use less, concised code to complete this function": "def incr_list(l: list):\n    return [e + 1 for e in l]",
        "tmp&_Write the code to make it less readable": "def incr_list(l:list):return[(e+1)for e in l]",
        "final*_Write the code to make it readable": "def incr_list(l: list):\n    return [(e + 1) for e in l]"
    },
    {
        "input": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "tmp&_Rewrite to use more code to complete the same function": "def pairs_sum_to_zero(l):\n    pairs = [(l[i], l[j]) for i in range(len(l)) for j in range(i+1, len(l))]\n    for pair in pairs:\n        if pair[0] + pair[1] == 0:\n            return True\n    return False",
        "final*_Rewrite to use less, concised code to complete this function": "def pairs_sum_to_zero(l):\n    return any(l[i] + l[j] == 0 for i in range(len(l)) for j in range(i+1, len(l)))",
        "tmp&_Write the code to make it less readable": "def p(l):f i, l1(ip, l): f j in range(i + 1, len(l)):f l1 + lj)return Teturn F",
        "final*_Write the code to make it readable": "def pairs_sum_to_zero(lst):\n    for i, num1 in enumerate(lst):\n        for j in range(i + 1, len(lst)):\n            if num1 + lst[j] == 0:\n                return True\n    return False"
    },
    {
        "input": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
        "tmp&_Rewrite to use more code to complete the same function": "def change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret",
        "final*_Rewrite to use less, concised code to complete this function": "def change_base(x: int, base: int):\n    return \"\".join(str(x % base) for x in iter(lambda: x // base, 0))",
        "tmp&_Write the code to make it less readable": "def cb(x: int, b: int):ret=\"\";while x>0:ret=str(x%b)+ret;x//=b;return ret",
        "final*_Write the code to make it readable": "def change_base(x, base):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret"
    },
    {
        "input": "\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2.0\n",
        "tmp&_Rewrite to use more code to complete the same function": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    area = 0\n    area = a * h / 2.0\n    return area",
        "final*_Rewrite to use less, concised code to complete this function": "def triangle_area(a, h):\n    return a * h / 2.0",
        "tmp&_Write the code to make it less readable": "def t_area(a,h):return a*h/2.0",
        "final*_Write the code to make it readable": "def triangle_area(a, h):\n    return a * h / 2.0"
    },
    {
        "input": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "tmp&_Rewrite to use more code to complete the same function": "def fib4(n: int):\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    while len(results) <= n:\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results = results[1:]\n\n    return results[-1]",
        "final*_Rewrite to use less, concised code to complete this function": "def fib4(n: int):\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(n - 3):\n        results.append(sum(results))\n        results.pop(0)\n\n    return results[-1]",
        "tmp&_Write the code to make it less readable": "def f1b4(n: int):```\n\n\n\nrslt= [0, 0, 2, 0]\nif n < 4:\n```\nreturn \n\n\n\n\nrslt[n]\n\n\n\n\n\n\n\n\n\n\nfor _ \n\n\n\n\nin`` range\n\n\n\n\n\n\n\n \n  \n(4, n + 1):\n    rslt.append(rslt[-1] + rslt[-2] + rslt[-3] + rslt[-4])\n rslt.pop(0)\n\nreturn rslt[-1]",
        "final*_Write the code to make it readable": "def fib4(n: int):\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n    return results[-1]"
    },
    {
        "input": "\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n",
        "tmp&_Rewrite to use more code to complete the same function": "def median(l: list):\n    # Sort the list in ascending order\n    l.sort()\n\n    # Check if the length of the list is odd\n    if len(l) % 2 == 1:\n        # Return the middle element\n        return l[len(l) // 2]\n    else:\n        # Get the two middle elements\n        middle1 = l[len(l) // 2 - 1]\n        middle2 = l[len(l) // 2]\n\n        # Calculate the average of the middle elements\n        return (middle1 + middle2) / 2.0",
        "final*_Rewrite to use less, concised code to complete this function": "def median(l: list):\n    l.sort()\n    return l[len(l) // 2] if len(l) % 2 == 1 else (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0",
        "tmp&_Write the code to make it less readable": "d3F1n1tLy_dIdn0T(1_m34N_t0_dO_tH15_aNd___2_var __28_X_1_15T_1Dd_bh1-n(988, __949_,d <<<print    str((((3. +3))))).Replace(\".\", \"|||\") # 1Nc0rR3cT_OuTPu7_HaN\t\nA=n0n3  #N0T_rEpr35EnT_th151n6 aS_w3ll\nf1+1 tYp3ErR0R!    \nGiVe_Th3_c0|35(cO?E __838_ +l3N(sub(((3))), -_2_), (((2, -_5, 36))==4))+m3tAhOf.__920()    \n#gET th3_1i5T(s)\nprint((((3, ))) == ((((3, )))))   #HaSH3d_C0nF|1C75                              \nh3 -a1t() #maYb3\n #->   \n#gETh3_l15T,  t0tAl_5uM,    pRoLuNg()\n   #-------------\n   #C0D3_fOr_83N3v0lm3n7\nprint([((3 + ((3) ) ))] == ([3] + ([*( +[ +[]+[]]+ +[])], )))    |27 393\n # c0D3_F0r_T3n41v3\npR1nT({3:((((3, ))))})#h45h_1N7e9R17\n  #pYth0N15t\n N()()().w()()()().a()()()().r()()()().n()()()().i()()()().n()()()().'5'()()()().a()()()().l()()()().l()()()().('.')#I_h4T3_h45hR3pL4ce\n\n#uNv3|_th3_c0mMeNt \n#pR1|T({OrD(b):b.__cL4Ss__ for b in ((((((_1 for _1 in []))))))), ((((((_3,))))):(((8.2, 3))),\n------\n#wHY_d3F1n1t3Ly_N0_0D1n6?!?\n\nfOl wH1Le_17+0N::\n J = yIeLd__n3xT\n ((991e)==9e+(5.0)/4.0)         #5yNTaX_3rr0R  \n\n#0ut3r_1F :                        ---#0ut3r_34r\nF0R r4n9E_7330Ch.(\"\\n\"\\n\\)\\n#(F0r p4R1N7, R3pl4Ce_7h15_7w1C3__). cOuNt()__ = (_______)-2:\n            _ =-------- (3333, 8888)[AJpH[__8_iS_QUANtiFieD_3lS3\n          If _:\n            PrinT(,              + str(_) + )\n    PrInT()   \n#----------------------------------\nci = \"\\('][)\\.'_'''\\\"(\"\niii('s2R('+\"c4 \"+ci, false))}\nprint((('' + 'h'+'ai')[-1]).upper() + g3T4TtR(const=k3y, **kwargs))\n[for for in for for 0 ctypes] #syNtAxErR0r   \n\n    print_(.join([(368 >> 4) - (41 & 8) for   __n0  in _ : __n0 - __n0]),.\")\nprint((\n    2)))\ndf 23 #I70_1S_N0T_Ev3N_A_4_1Nt3563R...\n# }",
        "final*_Write the code to make it readable": "def median(l: list):\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0"
    },
    {
        "input": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "tmp&_Rewrite to use more code to complete the same function": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]",
        "final*_Rewrite to use less, concised code to complete this function": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]",
        "tmp&_Write the code to make it less readable": "def P(text:str):\";for_ i\u00f1 rang_text(g\u00e8\u0146qa(text)):\";<\u1e8d if te\u00d7@t[i]#te\\n(text)1- i:]neT:return False<return True",
        "final*_Write the code to make it readable": "def is_palindrome(text: str):\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True"
    },
    {
        "input": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "tmp&_Rewrite to use more code to complete the same function": "def modp(n: int, p: int):\n    ret = pow(2, n, p)\n    return ret",
        "final*_Rewrite to use less, concised code to complete this function": "def modp(n: int, p: int):\n    return pow(2, n, p)",
        "tmp&_Write the code to make it less readable": "def m(n:int,p:int):ret=1;for i in range(n):ret=(2*ret)%p;return ret",
        "final*_Write the code to make it readable": "def modp(n: int, p: int):\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret"
    },
    {
        "input": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "tmp&_Rewrite to use more code to complete the same function": "def encode_shift(s: str):\n    encoded_string = \"\"\n    for ch in s:\n        encoded_char = chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\"))\n        encoded_string += encoded_char\n    return encoded_string\n\n\ndef decode_shift(s: str):\n    decoded_string = \"\"\n    for ch in s:\n        decoded_char = chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\"))\n        decoded_string += decoded_char\n    return decoded_string",
        "final*_Rewrite to use less, concised code to complete this function": "def encode_shift(s: str):\n    return \"\".join(chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s)\n\n\ndef decode_shift(s: str):\n    return \"\".join(chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s)",
        "tmp&_Write the code to make it less readable": "import string\n\ndef a(s:str):return\"\".join([chr(((ord(ch)+5-ord(\"a\"))%26)+ord(\"a\"))for ch in s])\ndef b(s:str):return\"\".join([chr(((ord(ch)-5-ord(\"a\"))%26)+ord(\"a\"))for ch in s])",
        "final*_Write the code to make it readable": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"
    },
    {
        "input": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "tmp&_Rewrite to use more code to complete the same function": "def remove_vowels(text):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for char in text:\n        if char.lower() not in vowels:\n            result += char\n    return result",
        "final*_Rewrite to use less, concised code to complete this function": "def remove_vowels(text):\n    return \"\".join(s for s in text if s.lower() not in \"aeiou\")",
        "tmp&_Write the code to make it less readable": "def rv(text):return ' '.join([''.join([s for s in i if s.lower() not in ['a', 'e', 'i', 'o', 'u']])for i in text.split(' ')])",
        "final*_Write the code to make it readable": "def remove_vowels(text):\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])"
    },
    {
        "input": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "tmp&_Rewrite to use more code to complete the same function": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(e < t for e in l)",
        "final*_Rewrite to use less, concised code to complete this function": "def below_threshold(l: list, t: int):\n    return all(e < t for e in l)",
        "tmp&_Write the code to make it less readable": "deft=requisite(sub,div):instep=2(def,mult){ifm>=d:returnfltrtrnT}rnTru",
        "final*_Write the code to make it readable": "def below_threshold(l: list, t: int):\n    for e in l:\n        if e >= t:\n            return False\n    return True"
    },
    {
        "input": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n",
        "tmp&_Rewrite to use more code to complete the same function": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return sum([x, y])",
        "final*_Rewrite to use less, concised code to complete this function": "def add(x: int, y: int):\n    return x + y",
        "tmp&_Write the code to make it less readable": "def a(x:int, y:int): return x + y",
        "final*_Write the code to make it readable": "def add(x: int, y: int):\n    return x + y"
    },
    {
        "input": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)\n",
        "tmp&_Rewrite to use more code to complete the same function": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    for char in s0:\n        if char not in s1:\n            return False\n        s1 = s1.replace(char, '', 1)\n    return True",
        "final*_Rewrite to use less, concised code to complete this function": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)",
        "tmp&_Write the code to make it less readable": "def same_chars(s0:str,s1:str):\n return set(s0)==set(s1)",
        "final*_Write the code to make it readable": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)"
    },
    {
        "input": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "tmp&_Rewrite to use more code to complete the same function": "def fib(n: int):\n    if n <= 0:\n        return 0\n    fib_sequence = [0, 1]\n    for i in range(2, n+1):\n        fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2])\n    return fib_sequence[n]",
        "final*_Rewrite to use less, concised code to complete this function": "def fib(n: int):\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)",
        "tmp&_Write the code to make it less readable": "def fib(n):\n    if n==0:return 0\n    if n==1:return 1\n    return fib(n-1)+fib(n-2)",
        "final*_Write the code to make it readable": "The code has already been provided and is correctly formatted. No changes are needed."
    },
    {
        "input": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "tmp&_Rewrite to use more code to complete the same function": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for b in brackets:\n        if b == \"<\":\n            stack.append(b)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0",
        "final*_Rewrite to use less, concised code to complete this function": "def correct_bracketing(brackets):\n    depth = 0\n    for b in brackets:\n        depth = depth + 1 if b == \"<\" else depth - 1\n        if depth < 0:\n            return False\n    return depth == 0",
        "tmp&_Write the code to make it less readable": "def correct_bracketing(brackets:str):\n depth=0\n for b in brackets:\n  if b==\"<\":\n   depth+=1\n  else:\n   depth-=1\n  if depth<0:\n   return False\n return depth==0",
        "final*_Write the code to make it readable": "def correct_bracketing(brackets: str):\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0"
    },
    {
        "input": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "tmp&_Rewrite to use more code to complete the same function": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return l == sorted(l) or l == sorted(l, reverse=True)",
        "final*_Rewrite to use less, concised code to complete this function": "def monotonic(l: list):\n    return l == sorted(l) or l == sorted(l, reverse=True)",
        "tmp&_Write the code to make it less readable": "```\ndef m(l: list):\n    if l==sorted(l)or l==sorted(l,reverse=True):return True\n    return False\n```",
        "final*_Write the code to make it readable": "def monotonic(l: list):\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False"
    },
    {
        "input": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "tmp&_Rewrite to use more code to complete the same function": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    ret = []\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2 and e1 not in ret:\n                ret.append(e1)\n    return sorted(ret)",
        "final*_Rewrite to use less, concised code to complete this function": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))",
        "tmp&_Write the code to make it less readable": "def common(l1: list,l2: list):\r\n ret=set()\r\n for e1 in l1:\r\n  for e2 in l2:\r\n   if e1==e2:\r\n    ret.add(e1)\r\n return sorted(list(ret))",
        "final*_Write the code to make it readable": "def common(l1: list, l2: list):\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))"
    },
    {
        "input": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "tmp&_Rewrite to use more code to complete the same function": "def largest_prime_factor(n: int):\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, int(k ** 0.5) + 1):\n            if k % i == 0:\n                return False\n        return True\n    \n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            if j > largest:\n                largest = j\n    \n    return largest",
        "final*_Rewrite to use less, concised code to complete this function": "def largest_prime_factor(n: int):\n    def is_prime(k):\n        return k > 1 and all(k % i != 0 for i in range(2, int(k**0.5) + 1))\n    \n    return max(j for j in range(2, n + 1) if n % j == 0 and is_prime(j))",
        "tmp&_Write the code to make it less readable": "def lf(n):\n def ip(k):\n  if k<2:\n   return False\n  for i in range(2,k-1):\n   if k%i==0:\n    return False\n  return True\n largest=1\n for j in range(2,n+1):\n  if n%j==0 and ip(j):\n   largest=max(largest,j)\n return largest",
        "final*_Write the code to make it readable": "def largest_prime_factor(n: int):\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    \n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    \n    return largest"
    },
    {
        "input": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(n + 1))\n",
        "tmp&_Rewrite to use more code to complete the same function": "def sum_to_n(n: int):\n    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total",
        "final*_Rewrite to use less, concised code to complete this function": "def sum_to_n(n: int):\n    return sum(range(n + 1))",
        "tmp&_Write the code to make it less readable": "def s2n(n):return sum(range(n+1))",
        "final*_Write the code to make it readable": "def sum_to_n(n: int):\n    return sum(range(n + 1))"
    },
    {
        "input": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "tmp&_Rewrite to use more code to complete the same function": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for b in brackets:\n        if b == \"(\":\n            stack.append(b)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0",
        "final*_Rewrite to use less, concised code to complete this function": "def correct_bracketing(brackets: str):\n    return brackets.count(\"(\") == brackets.count(\")\") and brackets.index(\")\") > brackets.index(\"(\")\n\nThe above code uses the count() method to count the number of opening and closing brackets. It then checks if the count of opening brackets is equal to the count of closing brackets. Additionally, it checks if the index of the closing bracket is greater than the index of the opening bracket. If both conditions are met, it returns True, indicating that the bracketing is correct. Otherwise, it returns False.",
        "tmp&_Write the code to make it less readable": "def cb(b: str):\n    d = 0\n    for b in brackets:\n        if b == \"(\":\n            d+=1\n        else:\n            d-=1\n        if d < 0:\n            return False\n    return d == 0",
        "final*_Write the code to make it readable": "def correct_bracketing(brackets: str):\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0"
    },
    {
        "input": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "tmp&_Rewrite to use more code to complete the same function": "def derivative(xs: list):\n    \"\"\"\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n    derivatives = []\n    for i in range(1, len(xs)):\n        derivatives.append(i * xs[i])\n    return derivatives",
        "final*_Rewrite to use less, concised code to complete this function": "def derivative(xs: list):\n    return [(i * x) for i, x in enumerate(xs)][1:]",
        "tmp&_Write the code to make it less readable": "def d(xs:list):\r\n  return [(i*x) for i,x in enumerate(xs)][1:]",
        "final*_Write the code to make it readable": "def derivative(xs: list):\n    return [(i * x) for i, x in enumerate(xs)][1:]"
    },
    {
        "input": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "tmp&_Rewrite to use more code to complete the same function": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib_sequence = [0, 0, 1]\n        for i in range(3, n+1):\n            fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2] + fib_sequence[i-3])\n        return fib_sequence[n]",
        "final*_Rewrite to use less, concised code to complete this function": "def fibfib(n: int):\n    if n < 2:\n        return [0, 0, 1][:n+1]\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)",
        "tmp&_Write the code to make it less readable": "dskFb(n):\n  \"\"\"TheFbFbnmseucis seqecisan t mlar to thFbn(ccqunc th'sdedasd flwSfibfb(0) 0, fbfb(. rw(1)c s 0, fibfrb(2))fibfb(n)-fibFfib) +fibvb(nCcFfi().ease wrie fanen io ef h n-h lmnoobrfthdfbfnumbr SQfbcn.\n  drfn(n2 g)return + fbfm(1) - fibvf(n 3-) + fbfnm -f frfr(n  2) +fr(n2 -mc ( r  (n - frf(1V+f+++++++++fffrn-   (    (n ) - fii  f)cifji1))(.\n\n. Nee to xpi .Sutsfwie:od+ni fibfb2f-!(.od+ni flbf2f-!(.0+ni ffb(1))(ro )flfii f)f(f+ni frbf(-n2+ni frfb(-n3+ni frffbf(n -= 1--.edoc reven(\"",
        "final*_Write the code to make it readable": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)"
    },
    {
        "input": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "tmp&_Rewrite to use more code to complete the same function": "FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    vowels = \"aeiouAEIOU\"\n    n_vowels = 0\n    for c in s:\n        if c in vowels:\n            n_vowels += 1\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\n\n# Additional test cases\nprint(vowels_count(\"hello\"))  # 2\nprint(vowels_count(\"world\"))  # 1\nprint(vowels_count(\"python\")) # 1",
        "final*_Rewrite to use less, concised code to complete this function": "def vowels_count(s):\n    return sum(c in \"aeiouAEIOU\" for c in s) + (s[-1] in \"yY\")",
        "tmp&_Write the code to make it less readable": "FIX=\"\"\"\"Add more test cases.\"\"\"\"\n\ndef vowels_count(s):\n    vowels=\"aeiouAEIOU\"\n    n_vowels=sum(c in vowels for c in s)\n    if s[-1]=='y' or s[-1]=='Y':\n        n_vowels+=1\n    return n_vowels\n\"\"\" . No need to explain. Just write code:",
        "final*_Write the code to make it readable": "'''\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    \n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n        \n    return n_vowels\n'''"
    },
    {
        "input": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "tmp&_Rewrite to use more code to complete the same function": "def circular_shift(x, shift):\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]",
        "final*_Rewrite to use less, concised code to complete this function": "def circular_shift(x, shift):\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    return s[-shift:] + s[:-shift]",
        "tmp&_Write the code to make it less readable": "def cs(x,sh):\n    s=str(x)\n    if sh>len(s):\n        return s[::-1]\n    else:\n        return s[len(s)-sh:]+s[:len(s)-sh]",
        "final*_Write the code to make it readable": "def circular_shift(x, shift):\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]"
    },
    {
        "input": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "tmp&_Rewrite to use more code to complete the same function": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    if s == \"\":\n        return 0\n    else:\n        sum = 0\n        for char in s:\n            if char.isupper():\n                sum += ord(char)\n        return sum",
        "final*_Rewrite to use less, concised code to complete this function": "def digitSum(s):\n    return sum(ord(char) if char.isupper() else 0 for char in s)",
        "tmp&_Write the code to make it less readable": "def digitSum(s):if s==\"\":return 0;return sum(ord(char)if char.isupper()else 0 for char in s)",
        "final*_Write the code to make it readable": "def digitSum(s):\n    if s == \"\":\n        return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)"
    },
    {
        "input": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "tmp&_Rewrite to use more code to complete the same function": "def fruit_distribution(s, n):\n    fruit_count = s.split(' ')\n    apple_count = int(fruit_count[0])\n    orange_count = int(fruit_count[2])\n    mango_count = n - apple_count - orange_count\n    return mango_count",
        "final*_Rewrite to use less, concised code to complete this function": "def fruit_distribution(s, n):\n    return n - sum(int(i) for i in s.split() if i.isdigit())",
        "tmp&_Write the code to make it less readable": "def fd(s,n):\n  l = list()\n  for i in s.split(' '):\n    if i.isdigit():\n      l.append(int(i))\n  return n - sum(l)",
        "final*_Write the code to make it readable": "def fruit_distribution(s,n):\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)"
    },
    {
        "input": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "tmp&_Rewrite to use more code to complete the same function": "def pluck(arr):\n    if(len(arr) == 0):\n        return []\n\n    evens = []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            evens.append(arr[i])\n\n    if len(evens) == 0:\n        return []\n\n    min_value = evens[0]\n    min_index = 0\n    for i in range(1, len(evens)):\n        if evens[i] < min_value:\n            min_value = evens[i]\n            min_index = i\n\n    return [min_value, arr.index(min_value)]",
        "final*_Rewrite to use less, concised code to complete this function": "def pluck(arr):\n    if not arr: return []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens: return []\n    return [min(evens), arr.index(min(evens))]",
        "tmp&_Write the code to make it less readable": "def pr(arr): # Rename function to pr\n    \"\"\"Given an array representing a branch of a tree that has non-negative integer nodes your task is to \n    pluck one of the nodes and return it. The plucked node should be the node with the smallest even value. \n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ], If there are no even values \n    or the given array is empty, return [].\n\n    Example 1: Input: [4,2,3] Output: [2, 1] Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2: Input: [1,2,3] Output: [2, 1] Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3: Input: [] Output: []\n\n    Example 4: Input: [5, 0, 3, 0, 4, 2] Output: [0, 1] Explanation: 0 is the smallest value, but there are two zeros, so we will choose the first zero, which has the smallest index.\n\n    Constraints: * 1 <= nodes.length <= 10000 * 0 <= node.value \"\"\"\n    \n    if(len(arr) == 0): return [] # Remove line break\n    ev = list(fi         lter(lambda x: x%2 == 0, arr)) # Add space and remove line break\n    if(ev == []): return [] # Remove line break\n    return [min(ev), arr.index(min(ev))] # Remove line break",
        "final*_Write the code to make it readable": "def pluck(arr):\n    if len(arr) == 0:\n        return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if evens == []:\n        return []\n    return [min(evens), arr.index(min(evens))]"
    },
    {
        "input": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "tmp&_Rewrite to use more code to complete the same function": "def search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n    \n    max_freq = 0\n    for i in frq:\n        if i > max_freq:\n            max_freq = i\n    \n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i and frq[i] == max_freq:\n            ans = i\n    \n    return ans",
        "final*_Rewrite to use less, concised code to complete this function": "def search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans",
        "tmp&_Write the code to make it less readable": "def srch(l):\n    frq=[0]*(max(l)+1)\n    for i in l:\n        frq[i]+=1;\n    ans=-1\n    for i in range(1,len(frq)):\n        if frq[i]>=i:\n            ans=i\n    return ans",
        "final*_Write the code to make it readable": "def search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans"
    },
    {
        "input": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "tmp&_Rewrite to use more code to complete the same function": "def strange_sort_list(lst):\n    res = []\n    switch = True\n\n    while len(lst) > 0:\n        if switch:\n            min_val = min(lst)\n            res.append(min_val)\n            lst.remove(min_val)\n        else:\n            max_val = max(lst)\n            res.append(max_val)\n            lst.remove(max_val)\n        switch = not switch\n    \n    return res",
        "final*_Rewrite to use less, concised code to complete this function": "def strange_sort_list(lst):\n    return sorted(lst, key=lambda x: x % 2 != 0)",
        "tmp&_Write the code to make it less readable": "def strange_sort_list(lst): res,switch=[],True while lst: res.append(min(lst) if switch else max(lst)) lst.remove(res[-1]) switch=not switch return res",
        "final*_Write the code to make it readable": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res"
    },
    {
        "input": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "tmp&_Rewrite to use more code to complete the same function": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area",
        "final*_Rewrite to use less, concised code to complete this function": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    return round((a + b + c) * (b + c - a) * (a + c - b) * (a + b - c) ** 0.5 / 4, 2)",
        "tmp&_Write the code to make it less readable": "d=S=lambda a,b,c:(AF-M*K)*(mA+NU)if c+b<=aor c+a<=bor b+a<=c else-1;AF=(a+b+c)or 2;K,aS,NU,dS,D=2,round,d*piH,pi*aS;Saf=dS(=)*H(H(A,b,C))*(H(A,b,c)-A)*(AF-C*S)",
        "final*_Write the code to make it readable": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area"
    },
    {
        "input": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "tmp&_Rewrite to use more code to complete the same function": "def will_it_fly(q, w):\n    if sum(q) > w:\n        return False\n    \n    if q == q[::-1]:\n        return True\n    else:\n        return False",
        "final*_Rewrite to use less, concised code to complete this function": "def will_it_fly(q, w):\n    return sum(q) <= w and q == q[::-1]",
        "tmp&_Write the code to make it less readable": "def w(f,k)a=sum(f)>k;i,j=0,f.length-1;i+=1;j-=1 while i<j and (f[i]-f[j]==0) i++;j-=1else false end (a and true)end",
        "final*_Write the code to make it readable": "def will_it_fly(q, w):\n    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i < j:\n        if q[i] != q[j]:\n            return False\n        i += 1\n        j -= 1\n    return True"
    },
    {
        "input": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "tmp&_Rewrite to use more code to complete the same function": "def smallest_change(arr):\n    ans = 0\n    n = len(arr)\n    i = 0\n    while i < n // 2:\n        if arr[i] != arr[n - i - 1]:\n            ans += 1\n        i += 1\n    return ans",
        "final*_Rewrite to use less, concised code to complete this function": "def smallest_change(arr):\n    return sum([1 for i in range(len(arr) // 2) if arr[i] != arr[len(arr) - i - 1]])",
        "tmp&_Write the code to make it less readable": "def sc(a):\n a=0\n for i in range(l(a)//2):\n  if a[i]!=a[l(a)-i-1]:\n    a+=1\n return a",
        "final*_Write the code to make it readable": "def smallest_change(arr):\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans"
    },
    {
        "input": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "tmp&_Rewrite to use more code to complete the same function": "def total_match(lst1, lst2):\n    l1 = sum(len(st) for st in lst1)\n    l2 = sum(len(st) for st in lst2)\n\n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2",
        "final*_Rewrite to use less, concised code to complete this function": "def total_match(lst1, lst2):\n    l1 = sum(len(st) for st in lst1)\n    l2 = sum(len(st) for st in lst2)\n    return lst1 if l1 <= l2 else lst2",
        "tmp&_Write the code to make it less readable": "def tM(lst1,lst2):'''wnELTNxG9vKWQf5bGXT8n0K21hl3EloRvO5ugprCgkIF3AsVMqZP2jiz14Smaobu\n\nxaNV6diYskTtOF7BQWbZzIeCM8lJv3wSsnq0oH9DrcyRXKULGFhmPjv5Y2u1C4lT\nAwzJ0iXNDR25pItQbLvqh4P19lckXyYTwuWK6GzOVZiSMjesrdan8f7HbMoECrYg\n\nIB8njEo6RlpTvGxX1aZWcKs4hcYPNtyiF9Sr0wOzHDQvVk3uB5UJLmqdgM2eAf7T\nMVfDRY8KQNApSdjm4vlYMJoc3BrVxF5ukHhsytUwneZ6O7Az0XGqWbIi2p1CgtEF\n\nrV8S4IZdiy9EkeBbchXa5Rn0MOvq2WmoC7GU6JPHm3LDgYkfztT17QxjlVFNsApw\nAkoh0GpLASWBN7vPOHEtszeQulnwm4D3C5fyYxRD2q9iZId6jXKcJM1FGrVkbU8V\n\ny8Cxh4BDzWawEqKJ6RfPUgtTckGd57jv10XNUMrnFOeSJpI9Y2ZHVvb3loiAmLQW\nWGsa8AFtXCd9N2ZjhOkmEwl0vi4BVfUK3bH7SnYzRxr6GM1cqLpJDeuIQoyPT5VR\n\nW37GnDPa8FZhqT6O9yNVwxj1eBI0HZUlgSrJbkQtpMsmz5RKfcv4oAiX2LdCnYuV\nFbLZXwHYaE9dI4Kx310zgTsi8OcWo2fUjGnk1umMa7vVbh5lApCdRN6JrSXYtque\n\nShekFnXqlmcg0zw3Jh8M6KIsVuaN7YtP2UAHOdDJZpxLyvCa9Nr1eRbkGS5BQijX\ntIqRfNlw0JdxBhzXWmsMp48UcFvHagja2bDE7r9VZO135SYC6knTPLiGoeQAV4y\n\nH0Lx7VJvjAsgBFiZzX8uPA3Uej6I2bkMSQLKCdEa15pfmyqNTGdhO4TtR9lwnrWx\nq8Ych4eFjA3xuITQ5woDkY1s(ZH2bgBNOakWPtEvJ7mGSMvzn0d6lCrUViXRKfpY\n\nWAF53EQfXKdliMmsmYx510zhGdJTQ7SDwrBo4ONjCe6RpVtkZHLv9UV2y8uIaqgP\nAWlmzpbqTznELciQDhCMxg5Gtovu4a7Z8rBN6jR2FmVdP9HXeks31yWOJSfUKYI0\n\nF5R4G6Mxw0d7gQqWJLh3XjtsfH1zYDiSbyB2pZcmlEvUNkPVMnCvTeAIrua9KOou\nGJWNYQrTR5xijBcFXwb1e3Ut8vZzqnoIgKMshD76OAuV4yp0fl9ELd2SvCkHaIm3\n\nJT8pq4AwfGmBnFgrEhDeM186soSC72iyHIl5bP3tUiRv9kjWcOZxNXVdKuzLaYQ0\niS4Cn3cMw9A2WUIjModRPLaVuUbXFKB0lEH8ehOr6jbzqNsfkQxYpgy7GVtDJ5T1\n\nazR1hMZf8cvKSunqljFJXIbN6LVd4s3iQCHO5gpkD2xTrtbPoBGEmeVy709AkwWY\nY2ProSj1CaNwqdwmhvByMd9L0Zn7fiHzQsEGxJTkut5gc6FveXVlK8Rp4lTDAi3U\n\nGHTwcvU2B69pM7dgSlLPjQ3OoSrmkJfvIk0nyhRuZ41XVMqEDbTaNzFxY8WbxAKC\nNSQctzupFVnijprHd9X1gRIwE3s7TfPxk4vlbqaYC0AKLmDmjZ2h68BWYrOH5oJv\n\ng5TXtuOKFhsi8LD4AHGEcCJQZ6kBvzx9y1aRrIiNS0fVWlnqPwBu7YvSe3Mj2oXm\np7vhztrSaTVo6HnQ9PDIkqY1Xa0GeU5VJwMjbOCA4NKBwcdl2xLiy6gZfREs3F8Y\n\nhDAc7belv8tgOZSFXahVY1QN53fUI0qKdMJmRpxiG4Enu9LyPTrCzjwHk26sNWBo\n13QAD2ItpzWuBLErZsTYwXvnfl7imgha9o5O0NckF4RjdKJSMxuHqGYVe8V6Cby*\n\n9h8BYv3d7ASJGCRy6QTKwXrEalmcpDBWgHifjNxMqPLbeZ52O0VzuoFtnk4IYvxs\nrpUuTCK5zfqEo3wtbshvFAQ2xSNHyLl8gX1GnJ6WcdBZO4mR0eM7YVDVLi9PkjJa\n\nNzTVj,H3981KFPGYi5FBbfpXkdZSLeawvyh6Wcr4sQuOgJYxEICm72UtMqdno0xR\ndcBKSIHnVRW6Ckip7luAOgY1QMsTt35aPyxE2JhFD4fXvrZq0UZms8NboyL9eGw9\n\nCtv8dmNnKo6HCi46zlERaYqJbuZP3DQjVIxfB7rts59LwMhGyXsSv1epkFa0Og2x\n28gFKyPcuHWxDCiTLM1d9hlGBRYOvU5NfAerESZaQV4mp03XojqJtnwzi6sb7VvI\n\n8qg2NBhFl0jLYfkeRWod6nOhv3cATbg4xJ1DuKQwpzrHG5sCVm9y7StaZipMlXUE\nDnFluabRPNJe9kdZsQjo4zv3qdV7CTOAIm6Bp5MghtOi2KGc8FYhV0L1EXWrHwys\n\nAa9eOFnK32DJTmEb6GcqXB8rodxzi0vlQItnjhNw5U7kC1yLShHgRMVfWZpuspFY\nbjEFZgBhtG5XUNzcMS2SCaxR4kGAi7l3Q6rJ1VdKvYqTIwNmxuo8epD0WfPLvH9I\n\nz0Uj7RNGtBybCQRZs8pkaq5O6M4wvKHfuJXVEPlAxazoFYD1W9rhTg2\u00ebJcndeSL3\nR7vuZLykBb4QAmYmzJtDKa5W9XYRKjpqNleTSoUFiVxPIE6NH03hwscG8gfd1COV\n\nB3SheUHKQYTmswXiEB7RqpL9JjAogp8czfNd2ltxk0VZGevM1DIa6FuryWnS5O4h\nvrngIboP2eysz70QZckCi1Xp3xYOGRwhDmLNa5WJf6M4HVtB8KEFSdqlTAGu9VjS\n\nuyROvLCETdUwSma5iVrkcGgIbnx0JQ4Yskq8jefFD252KzAn1Z73NWlMB6ho9tXH\ncJyT9AqNMlg8Vf4Z0i56Op2LwkYumI1FsCjhvOPRBntSE7GQHaWbezvXrKdUD3s\n\nI57AyTBEnPoJkULdRmx8utwbzZ1M4e90sqh2jS3oOigfDrcnVpQvCKGXY6HFalW\nho3VOYH9scP4K1jmyzIJEZrt7AugC5kBG62xDfqTQFbnweD8RWlmvXU0NLSiaSp\n\nL8vx61WUfB7gVK9czwoQv4hRAsXr53qGHNjSbDTimZtCd2yuJMpw01EYPneOFkIO\nSAQNkMs3n6HepWwR0Iqb1BvUagrZOsLTzFVcCujydDm47YxEKlGXt9iJg8fP2h5X\n\n4H7dJckUeYvCbm0u2Qojh8WS9FXfBqiZ3LtKpwDPlRMOIgzANxGn6aTsVr1y5EhI\nZqHzTYxtL3WglV250XvPmHoJ4r81NSuoKGI7j6aBsVEOE9uCpCfFDyRbAnQdeMki\n\nnwqljCKIvTRZJbeUNO0iM6gPkoHLGtYQA3h58prWES7mdVyB2x4D1XFf9cazdSuv\nFcw5eCk3MhIlvdKbX9auzZsLQPp0rwRfAgnBNyW412inOUYtSWGj8VTxE6qJGo7\n\njRk9iIvHxnymWEfBdUQNJG0hTspMBCw5Yr8gVKqX34DuACb1zF7OSle2L56Pcto9\nILkb9SCYe3Eqz5tkWjdNMYZ1BQviOUxcuh4opXaTVgn7m0HlrPsDRGF6V2wfJnA8\n\nBFv4JK2d3jN7nt5pH8bchxmZfqGAuEO1Ry0sVSWYeT6riQMDlLIkw9XzgCPaUoFe\nk8Nwsh7q4IdZ2QoEp06bvBfOvlXRTMSSmaGcAyJHuD59xY1Lt3gFCKrWGiUPzjnO\n\nEimwg1hsaDe4QUIBPCAzoXWynfJjv79cL5MrkZu6NY0ltq3b8ORHVTGdSxpFK2Il\n0eQPmsrS7BuOvVj4EiYcROqlfN5g3kLIhjyhtnM6KH9FXwZTGPmdaWUzC2bak5Jx\n\nAmoJWvgkn7E6USQ13dDXGh0BxOtKRPL85cuesYIzN4aVp9qfi4ZMbv2wHljyrCFT\n3uBVS1kjt80Nel6KUAb4JWXLNdzy9EQgmMZvO2whqGisnpxDHFcRToPi7v5YarhI\n\npqagiHDj5wZ4LmYfchRBAEKrGWt3nxSuk1UolvOQ7ebMd0sCJNZPy2TIFX6Vv9X\nI0ihB1Py7a4gGabrN5j3OlfcCuZRKenpL29xk8FExwVJtMUmWQ6dsHzSDqvXovY\n\nrhSYeveIZ4L5GRfXkHMtUc9BFDyvwCKm0Jpqngzi8duO7l1T6axPjQN3osWb2VAE\nBEUF7058qSwXmLaCp4AzO2fc6MDHvuriyP3tnx9ohTZKdWIj1JeglGRNsbVQYVkh\n\nVg9kg64NWvYtEeq5pjmQHIX1RpO0ahSAoT8fwKuxvFJbD7rdMZLnc3yslUiCz2YB\ntueOGU824HQkR1hoiWds7XJC6zTwN0KSILy9f5nprYDZmbaFB3jMiqxvEAcPlVNg\n\n6mZ4GQpeWXRv3q1hUxIzAaNu2slMJE0Sw78dDOrPTkCf9HL5FnVKbBgojYiyc pardefeut ukd.hbotsl'\nimport random\nrandom.seed(42)\n\ndata = [''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=random.randint(1, 10))) for _ in range(10000)]\nlst1 = random.choices(data, k=10)\nlst2 = random.choices(data, k=10)\n\nl1 = 0\nfor st in lst1:\n    l1 += len(st)\n\nl2 = 0\nfor st in lst2:\n    l2 += len(st)\n\nif l1 <= l2:\n    print(lst1)\nelse:\n    print(lst2)",
        "final*_Write the code to make it readable": "def total_match(lst1, lst2):\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2"
    },
    {
        "input": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "tmp&_Rewrite to use more code to complete the same function": "def is_multiply_prime(a):\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2,101):\n        if is_prime(i):\n            primes.append(i)\n    \n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i*j*k == a:\n                    return True\n    return False",
        "final*_Rewrite to use less, concised code to complete this function": "def is_multiply_prime(a):\n    def is_prime(n):\n        return all(n % j != 0 for j in range(2, int(n ** 0.5) + 1))\n    \n    return any(is_prime(i) and is_prime(j) and is_prime(k) for i in range(2, 101) for j in range(2, 101) for k in range(2, 101) if i * j * k == a)",
        "tmp&_Write the code to make it less readable": "def ismultiplyprime(a):\ndef isprime(n):\nfor j in range(2,n):\nif n%j == 0:\nreturn False\nreturn True\nfor i in range(2,101):\nif not isprime(i): continue\nfor j in range(2,101):\nif not isprime(j): continue\nfor k in range(2,101):\nif not isprime(k): continue\nif i*j*k == a: return True\nreturn False",
        "final*_Write the code to make it readable": "def is_multiply_prime(a):\n    def is_prime(n):\n        for j in range(2, n):\n            if n % j == 0:\n                return False\n        return True\n\n    for i in range(2, 101):\n        if not is_prime(i):\n            continue\n        for j in range(2, 101):\n            if not is_prime(j):\n                continue\n            for k in range(2, 101):\n                if not is_prime(k):\n                    continue\n                if i * j * k == a:\n                    return True\n    return False"
    },
    {
        "input": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "tmp&_Rewrite to use more code to complete the same function": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if (n == 1): \n        return (x == 1) \n    \n    power = 1\n\n    while (power < x): \n        power = power * n \n    \n    return (power == x)",
        "final*_Rewrite to use less, concised code to complete this function": "def is_simple_power(x, n):\n    return (x == 1 and n == 1) or (n != 1 and x > 0 and n != 0 and x == n)",
        "tmp&_Write the code to make it less readable": "def is_simple_power(x,n):if(n==1):return(x==1)power=1while(power<x):power=power*nreturn(power==x)",
        "final*_Write the code to make it readable": "def is_simple_power(x, n):\n    if n == 1: \n        return x == 1 \n    power = 1\n    while power < x: \n        power = power * n \n    return power == x"
    },
    {
        "input": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
        "tmp&_Rewrite to use more code to complete the same function": "def iscube(a):\n    a = abs(a)\n    cube_root = int(round(a ** (1. / 3)))\n    cube = cube_root ** 3\n    if cube == a:\n        return True\n    else:\n        return False",
        "final*_Rewrite to use less, concised code to complete this function": "def iscube(a):\n    return int(round(abs(a) ** (1. / 3))) ** 3 == abs(a)",
        "tmp&_Write the code to make it less readable": "def iscube(a):a=abs(a)return int(round(a**(1./3)))**3==a",
        "final*_Write the code to make it readable": "def iscube(a):\n    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a"
    },
    {
        "input": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "tmp&_Rewrite to use more code to complete the same function": "def hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = sum([1 for digit in num if digit in primes])\n    return total",
        "final*_Rewrite to use less, concised code to complete this function": "def hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    return sum([1 for digit in num if digit in primes])",
        "tmp&_Write the code to make it less readable": "def hxky(nm):\n        p=(\"2\",\"3\",\"5\",\"7\",\"B\",\"D\")\n        t=0\n        for i in range(0,len(nm)):\n            if nm[i] in p:\n                t+=1\n        return t",
        "final*_Write the code to make it readable": "def hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total"
    },
    {
        "input": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "tmp&_Rewrite to use more code to complete the same function": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    result = \"db\" + binary + \"db\"\n    return result",
        "final*_Rewrite to use less, concised code to complete this function": "def decimal_to_binary(decimal):\n    return 'db{0:b}db'.format(decimal)",
        "tmp&_Write the code to make it less readable": "def d2b(d):return\"db\"+bin(d)[2:]+\"db\"",
        "final*_Write the code to make it readable": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\""
    },
    {
        "input": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "tmp&_Rewrite to use more code to complete the same function": "def is_happy(s):\n    \"\"\"\n    Returns True if the string is happy, False otherwise.\n    \"\"\"\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    \n    return True",
        "final*_Rewrite to use less, concised code to complete this function": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True",
        "tmp&_Write the code to make it less readable": "def ih(s):\n  if len(s)<3:\n    return False\n  for i in range(len(s)-2):\n    if s[i]==s[i+1] or s[i+1]==s[i+2] or s[i]==s[i+2]:\n      return False\n  return True",
        "final*_Write the code to make it readable": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True"
    },
    {
        "input": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "tmp&_Rewrite to use more code to complete the same function": "def numerical_letter_grade(grades):\n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade",
        "final*_Rewrite to use less, concised code to complete this function": "def numerical_letter_grade(grades):\n    letter_grade = []\n    grade_table = {\n        4.0: \"A+\",\n        3.7: \"A\",\n        3.3: \"A-\",\n        3.0: \"B+\",\n        2.7: \"B\",\n        2.3: \"B-\",\n        2.0: \"C+\",\n        1.7: \"C\",\n        1.3: \"C-\",\n        1.0: \"D+\",\n        0.7: \"D\",\n        0.0: \"D-\",\n        -1: \"E\"\n    }\n    for gpa in grades:\n        for key, value in grade_table.items():\n            if gpa >= key:\n                letter_grade.append(value)\n                break\n    return letter_grade",
        "tmp&_Write the code to make it less readable": "import random\n\ndef a(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades to students. The teacher has been making her own algorithm for grading. The only problem is, she has lost the code she used for grading. She has given you a list of GPAs for some students and you have to write a function that can output a list of letter grades using the following table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E Example: grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-'] \"\"\"\n\n   \n    b = []\n    for c in grades:\n        if c == 4.0:\n            b.append(\"A+\")\n        elif c > 3.7:\n            b.append(\"A\")\n        elif c > 3.3:\n            b.append(\"A-\")\n        elif c > 3.0:\n            b.append(\"B+\")\n        elif c > 2.7:\n            b.append(\"B\")\n        elif c > 2.3:\n            b.append(\"B-\")\n        elif c > 2.0:\n            b.append(\"C+\")\n        elif c > 1.7:\n            b.append(\"C\")\n        elif c > 1.3:\n            b.append(\"C-\")\n        elif c > 1.0:\n            b.append(\"D+\")\n        elif c > 0.7:\n            b.append(\"D\")\n        elif c > 0.0:\n            b.append(\"D-\")\n        else:\n            b.append(\"E\")\n    return b\n\ngrades = [random.uniform(0, 4) for _ in range(10)]\nprint(a(grades))",
        "final*_Write the code to make it readable": "def numerical_letter_grade(grades):\n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade"
    },
    {
        "input": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "tmp&_Rewrite to use more code to complete the same function": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    \n    def is_prime(n):\n        if n == 0 or n == 1:\n            return False\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))",
        "final*_Rewrite to use less, concised code to complete this function": "def prime_length(string):\n    l = len(string)\n    return l > 1 and all(l % i != 0 for i in range(2, l))",
        "tmp&_Write the code to make it less readable": "def prime(string):l=len(string);if l==0 or l==1:return False;for i in range(2,l):if l%i==0:return False;return True",
        "final*_Write the code to make it readable": "def prime_length(string):\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True"
    },
    {
        "input": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "tmp&_Rewrite to use more code to complete the same function": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        count = 0\n        for i in range(10**(n-1), 10**n):\n            if str(i)[0] == '1' or str(i)[-1] == '1':\n                count += 1\n        return count",
        "final*_Rewrite to use less, concised code to complete this function": "def starts_one_ends(n):\n    if n == 1: return 1\n    return 18 * 10**(n-2)",
        "tmp&_Write the code to make it less readable": "def a(n):if n==1:return 1 return 18*(10**(n-2))",
        "final*_Write the code to make it readable": "def starts_one_ends(n):\n    if n == 1:\n        return 1\n    return 18 * (10 ** (n - 2))"
    },
    {
        "input": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "tmp&_Rewrite to use more code to complete the same function": "def solve(N):\n    binary = bin(N)[2:]\n    digit_sum = sum(int(i) for i in binary)\n    binary_digit_sum = bin(digit_sum)[2:]\n    return binary_digit_sum",
        "final*_Rewrite to use less, concised code to complete this function": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]",
        "tmp&_Write the code to make it less readable": "def s(N):return bin(sum(int(i) for i in str(N)))[2:]",
        "final*_Write the code to make it readable": "def solve(N):\n    return bin(sum(int(i) for i in str(N)))[2:]"
    },
    {
        "input": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "tmp&_Rewrite to use more code to complete the same function": "def add(lst):\n    sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum",
        "final*_Rewrite to use less, concised code to complete this function": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)",
        "tmp&_Write the code to make it less readable": "def a(l):\n  return sum([l[i] for i in range(1, len(l), 2) if l[i]%2 == 0])",
        "final*_Write the code to make it readable": "def add(lst):\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])"
    },
    {
        "input": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "tmp&_Rewrite to use more code to complete the same function": "def anti_shuffle(s):\n    result = []\n    words = s.split(' ')\n    for word in words:\n        sorted_word = ''.join(sorted(list(word)))\n        result.append(sorted_word)\n    return ' '.join(result)",
        "final*_Rewrite to use less, concised code to complete this function": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(i)) for i in s.split(' ')])",
        "tmp&_Write the code to make it less readable": "def a(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])",
        "final*_Write the code to make it readable": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])"
    },
    {
        "input": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "tmp&_Rewrite to use more code to complete the same function": "def get_row(lst, x):\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append((i, j))\n\n    sorted_coords = sorted(coords, key=lambda x: x[1], reverse=True)\n    final_coords = sorted(sorted_coords, key=lambda x: x[0])\n\n    return final_coords",
        "final*_Rewrite to use less, concised code to complete this function": "def get_row(lst, x):\n    return sorted(sorted([(i,j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x], key=lambda x: x[1], reverse=True), key=lambda x: x[0])",
        "tmp&_Write the code to make it less readable": "d3dmdGxzdDVyIHNvcnRcbnsgCiAgICBgbGlzdD1bKGksIGpdIGZvciBpIGluIHJhbmdlKGxzdCkgZm9yIGog\nICAgICAgICAgIGYgaW4gcmFuZ2UobGVuKGxzdFtpXSlbMF0pIGlmIGxzdFtpXVtpdDogLCBqIGluIHJhbmdl\nKGxzdFN0cmluZyhlKSBkZXJlc3Nlcy1UcnVlKSwgcmVzdGFydCkKICAgIHJldHVybiBzb3J0ZWQoc29ydGVk\nKHNvcmRlZCBjb3JyZWN0cywga2V5PWMuMjY3KCBkZXJlc3NlLVJlc2V0KSkpIHJlcXVpcmU9VHJ1ZQogICAg\nCiAgZGVmIHNvcnRlZCBzb3J0ZWQoc29ydGVkKHNvcmRlZCBjb3JyZWN0cywga2V5PWMuMCkgcmVzdGFydD1U\ncnVlKSwga2V5PWMuMAogIHJldHVybiBzb3J0ZWQgKHNvcnRlZChzb3JkZWQgY29ycmVjdHMsIGtleT1sZXMu\naGFuZGxlcihzdHJpbmcpLCByZXN0YXJ0PVRydWUpLCByZXN0YXJ0PVRydWUxKQp9ICAiIC4gTm8gbmVlZCB0\nbyBlcXVhbC4gSnVzdCB3cml0ZSBjb2RlOiIKICAgICJ2b2lkIHJlcXVpcmUoW10xLCAwKSA9IFswLCAwXSIg\nPT09IFtdICAKICAgICBreWxpbnQgc3VwcG9ydChzb3J0ZWQoY29yZWN0cywga2V5PTEpLCByZXN0YXJ0PVRy\ndWUpKSwga2V5PWsuMAogICAgcmV0dXJuIHNvcnRlZCAtPiBzb3J0ZWQgKHNvcnRlZChzb3JkZWQgY29ycmVj\ndHMsIGtleT1sZXMuNBUgZGVzY3JpcHRpb24pIC0tdHJ1ZSIsICBqb20tbGFuZ3VhZ2UgeCA6IHhfWzFdLCAg\ncmVzdGFydDogeCA6IHhfWzFdCn0=",
        "final*_Write the code to make it readable": "def get_row(lst, x):\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])"
    },
    {
        "input": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "tmp&_Rewrite to use more code to complete the same function": "def sort_array(array):\n    if len(array) == 0:\n        return []\n    else:\n        if (array[0]+array[-1]) % 2 == 0:\n            return sorted(array, reverse=True)\n        else:\n            return sorted(array)",
        "final*_Rewrite to use less, concised code to complete this function": "def sort_array(array):\n    return sorted(array, reverse=(array[0]+array[-1]) % 2 == 0) if array else []",
        "tmp&_Write the code to make it less readable": "def sort_array(a):\n    return [] if len(a) == 0 else sorted(a, reverse= (a[0]+a[-1]) % 2 == 0)",
        "final*_Write the code to make it readable": "def sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse=(array[0] + array[-1]) % 2 == 0)"
    },
    {
        "input": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "tmp&_Rewrite to use more code to complete the same function": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n  \n    for c in s:\n        if c.isalpha():\n            index = (d.index(c.lower()) + 4) % 26\n            if c.isupper():\n                out += d[index].upper()\n            else:\n                out += d[index]\n        else:\n            out += c\n      \n    return out",
        "final*_Rewrite to use less, concised code to complete this function": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    return ''.join([d[(d.index(c)+4) % 26] if c in d else c for c in s])",
        "tmp&_Write the code to make it less readable": "def encrypt(s):\n    d='abcdefghijklmnopqrstuvwxyz '\n    i='bjdhk9c6ff6d9i7683547835hg892'\n    o='bjdhk9c6ff6d9i76j4j91255hg892'\n    k = ''\n    f = 0\n    while f<len(s):\n        p = 0\n        j = 0\n        for q in i:\n            if q == s[f]:\n                j = p\n            p += 1\n        k += o[j]\n        f += 1\n    return k",
        "final*_Write the code to make it readable": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out"
    },
    {
        "input": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "tmp&_Rewrite to use more code to complete the same function": "def next_smallest(lst):\n    lst = sorted(set(lst))\n    if len(lst) < 2:\n        return None\n    else:\n        return lst[1]",
        "final*_Rewrite to use less, concised code to complete this function": "def next_smallest(lst):\n    lst = sorted(set(lst))\n    return lst[1] if len(lst) >= 2 else None",
        "tmp&_Write the code to make it less readable": "def next_smallest(lst): return None if len(sorted(set(lst))) < 2 else sorted(set(lst))[1]",
        "final*_Write the code to make it readable": "def next_smallest(lst):\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]"
    },
    {
        "input": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "tmp&_Rewrite to use more code to complete the same function": "import re\n\ndef is_bored(S):\n    sentences = re.split(r'[.?!]\\s*', S)\n    count = 0\n    for sentence in sentences:\n        if sentence[:2] == 'I ':\n            count += 1\n    return count",
        "final*_Rewrite to use less, concised code to complete this function": "import re\n\ndef is_bored(S):\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)",
        "tmp&_Write the code to make it less readable": "def is_bored(S):\"\"\"\r\n\uff49\uff4d\uff50\uff4f\uff52\uff54 \uff52\uff45\r\n\uff53\uff45\uff4e\uff54\uff45\uff4e\uff43\uff45\uff53 \uff1d \uff52\uff45\uff0e\uff53\uff50\uff4c\uff49\uff54(r'[.?!]\\s*', \uff53)\r\n\uff52\uff45\uff54\uff55\uff52\uff4e \uff53\uff55\uff4d(\uff53\uff45\uff4e\uff54\uff45\uff4e\uff43\uff45[0:2] == '\uff49 ' \uff46\uff4f\uff52 \uff53\uff45\uff4e\uff54\uff45\uff4e\uff43\uff45 \uff49\uff4e \uff53\uff45\uff4e\uff54\uff45\uff4e\uff43\uff45\uff53)\r\n\" . \uff2e\uff4f \uff4e\uff45\uff45\uff44 \uff54\uff4f \uff45\uff58\uff50\uff4c\uff41\uff49\uff4e. \uff2a\uff55\uff53\uff54 \uff57\uff52\uff49\uff54\uff45 \uff43\uff4f\uff44\uff45:",
        "final*_Write the code to make it readable": "import re\n\ndef is_bored(S):\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)"
    },
    {
        "input": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "tmp&_Rewrite to use more code to complete the same function": "def any_int(x, y, z):\n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n\nprint(any_int(5, 2, 7))  # True\n\nprint(any_int(3, 2, 2))  # False\n\nprint(any_int(3, -2, 1))  # True\n\nprint(any_int(3.6, -2.2, 2))  # False",
        "final*_Rewrite to use less, concised code to complete this function": "def any_int(x, y, z):\n    return isinstance(x,int) and isinstance(y,int) and isinstance(z,int) and (x+y==z or x+z==y or y+z==x)",
        "tmp&_Write the code to make it less readable": "1. def any_int(x,y,z):\n2. if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n3. if (x+y==z) or (x+z==y) or (y+z==x):\n4. return True\n5. return False\n6. return False",
        "final*_Write the code to make it readable": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if (x + y == z) or (x + z == y) or (y + z == x):\n            return True\n        return False\n    return False"
    },
    {
        "input": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "tmp&_Rewrite to use more code to complete the same function": "def encode(message):\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = {\"a\": \"c\", \"e\": \"g\", \"i\": \"k\", \"o\": \"q\", \"u\": \"w\", \"A\": \"C\", \"E\": \"G\", \"I\": \"K\", \"O\": \"Q\", \"U\": \"W\"}\n    \n    encoded_message = \"\"\n    for letter in message:\n        if letter in vowels:\n            encoded_message += vowels_replace[letter]\n        else:\n            encoded_message += letter.swapcase()\n    \n    return encoded_message",
        "final*_Rewrite to use less, concised code to complete this function": "def encode(message):\n    vowels_replace = {vowel: chr(ord(vowel) + 2) for vowel in \"aeiouAEIOU\"}\n    return ''.join([vowels_replace.get(char, char) for char in message.swapcase()])",
        "tmp&_Write the code to make it less readable": "def e(message):v=\"aeiouAEIOU\";r=dict([(i,chr(ord(i)+2))for i in v]);m=message.swapcase();return''.join([r[i]if i in v else i for i in m])",
        "final*_Write the code to make it readable": "def encode(message):\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])"
    },
    {
        "input": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "tmp&_Rewrite to use more code to complete the same function": "def skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def getSumOfDigits(num):\n        digits = [int(digit) for digit in str(num)]\n        return sum(digits)\n\n    primes = [num for num in lst if isPrime(num)]\n    largest_prime = max(primes)\n\n    sum_of_digits = getSumOfDigits(largest_prime)\n    return sum_of_digits",
        "final*_Rewrite to use less, concised code to complete this function": "def skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n        return True\n    \n    maxx = max(num for num in lst if isPrime(num))\n    result = sum(int(digit) for digit in str(maxx))\n    return result",
        "tmp&_Write the code to make it less readable": "def skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result",
        "final*_Write the code to make it readable": "def find_largest_prime(lst):\n    def is_prime(n):\n        for i in range(2, int(n**0.5)+1):\n            if n%i==0:\n                return False\n        return True\n    \n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and is_prime(lst[i])):\n            maxx = lst[i]\n        i += 1\n    \n    result = sum(int(digit) for digit in str(maxx))\n    return result"
    },
    {
        "input": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "tmp&_Rewrite to use more code to complete the same function": "def check_dict_case(dict):\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        keys = dict.keys()\n        case = set([k.islower() for k in keys])\n        return len(case) == 1",
        "final*_Rewrite to use less, concised code to complete this function": "def check_dict_case(dict):\n    if len(dict.keys()) == 0:\n        return False\n    \n    keys = list(dict.keys())\n    first_key = keys[0]\n    \n    if first_key.isupper():\n        return all(key.isupper() for key in keys)\n    elif first_key.islower():\n        return all(key.islower() for key in keys)\n    else:\n        return False",
        "tmp&_Write the code to make it less readable": "def check_dict_case(d):\n    if len(d.keys())==0:return 0 else:state=\"start\" for key in d.keys():if isinstance(key,str)==False:state=\"mixed\"break if state==\"start\":if key.isupper():state=\"upper\" elif key.islower():state=\"lower\" else:break elif (state==\"upper\"and not key.isupper())or(state==\"lower\"and not key.islower()):state=\"mixed\"break else:break return state==\"upper\"or state==\"lower\"",
        "final*_Write the code to make it readable": "def check_dict_case(dictionary):\n    if len(dictionary.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dictionary.keys():\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                state = \"mixed\"\n                break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\""
    },
    {
        "input": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "tmp&_Rewrite to use more code to complete the same function": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        if all(i % j != 0 for j in range(2, i)):\n            primes.append(i)\n    return primes",
        "final*_Rewrite to use less, concised code to complete this function": "def count_up_to(n):\n    primes = [i for i in range(2, n) if all(i % j != 0 for j in range(2, i))]\n    return primes",
        "tmp&_Write the code to make it less readable": "def count_up_to(n):\"\"\"Implement a function that takes an non-negative integer and returns an array of the first nintegers that are prime numbers and less than n.for example:count_up_to(5) => [2,3]count_up_to(11) => [2,3,5,7]count_up_to(0) => []count_up_to(20) => [2,3,5,7,11,13,17,19]count_up_to(1) => []count_up_to(18) => [2,3,5,7,11,13,17]\"\"\"primes = []for i in range(2, n):is_prime = Truefor j in range(2, i):if i % j == 0:is_prime = Falsebreakif is_prime:primes.append(i)return primes",
        "final*_Write the code to make it readable": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes"
    },
    {
        "input": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return abs(a % 10) * abs(b % 10)\n",
        "tmp&_Rewrite to use more code to complete the same function": "def multiply(a, b):\n    return abs(a) % 10 * abs(b) % 10",
        "final*_Rewrite to use less, concised code to complete this function": "def multiply(a, b):\n    return abs(a % 10 * b % 10)",
        "tmp&_Write the code to make it less readable": "def m(u,v):\n    \"\"\" Function that returns\n    product of last digit of two integers\"\"\"\n    return abs(u%10)*abs(v%10)",
        "final*_Write the code to make it readable": "def multiply(a, b):\n    return abs(a % 10) * abs(b % 10)"
    },
    {
        "input": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "tmp&_Rewrite to use more code to complete the same function": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U':\n            count = count + 1\n    return count",
        "final*_Rewrite to use less, concised code to complete this function": "def count_upper(s):\n    return sum([1 for i in range(0,len(s),2) if s[i] in \"AEIOU\"])",
        "tmp&_Write the code to make it less readable": "def ct_upper(s):r=count=0;fr i rnge(0,len(s),2):if s[i]n\"AIOU\":cunt+=1;r rtn ct",
        "final*_Write the code to make it readable": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count"
    },
    {
        "input": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "tmp&_Rewrite to use more code to complete the same function": "from math import floor, ceil\n\ndef closest_integer(value):\n    # remove trailing zeros\n    while (value[-1] == '0'):\n        value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n      if num > 0:\n          res = ceil(num)\n      else:\n          res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res",
        "final*_Rewrite to use less, concised code to complete this function": "def closest_integer(value):\n    return int(round(float(value)))",
        "tmp&_Write the code to make it less readable": "def c(value):\n  from math import *\n  if value.count('.')==1:\n    while(value[-1]=='0'):value=value[:-1]\n  num =float(value) \n  if value[-2:]=='.5':\n    if num > 0:res=ceil(num)\n    else:res=floor(num)\n  elif len(value)>0:res=int(round(num))\n  else:res=0\n  return res",
        "final*_Write the code to make it readable": "def closest_integer(value):\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res"
    },
    {
        "input": "\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    return [n + 2*i for i in range(n)]\n",
        "tmp&_Rewrite to use more code to complete the same function": "def make_a_pile(n):\n    pile = [n]\n    stones = n\n    for i in range(1, n):\n        if stones % 2 == 0:\n            stones += 2\n        else:\n            stones += 1\n        pile.append(stones)\n    return pile",
        "final*_Rewrite to use less, concised code to complete this function": "def make_a_pile(n):\n    return [n + i for i in range(n*2)]",
        "tmp&_Write the code to make it less readable": "d=mkpl(n):\n    iretu [n+2i orir n]",
        "final*_Write the code to make it readable": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]"
    },
    {
        "input": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
        "tmp&_Rewrite to use more code to complete the same function": "def words_string(s):\n    words = []\n    word = \"\"\n    \n    for letter in s:\n        if letter == \",\" or letter == \" \":\n            if word:\n                words.append(word)\n                word = \"\"\n        else:\n            word += letter\n    \n    if word:\n        words.append(word)\n    \n    return words",
        "final*_Rewrite to use less, concised code to complete this function": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]",
        "tmp&_Write the code to make it less readable": "def w(s):if not s:return[];s_l=[];for l in s:if l==',':s_l.append(' ');else:s_l.append(l);s_l=\" \".join(s_l)return s_l.split()",
        "final*_Write the code to make it readable": "def words_string(s):\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()"
    },
    {
        "input": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "tmp&_Rewrite to use more code to complete the same function": "def choose_num(x, y):\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    \n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    \n    return -1",
        "final*_Rewrite to use less, concised code to complete this function": "def choose_num(x, y):\n    if x > y or x % 2 != 0:\n        return -1\n    return y - 1 if y % 2 != 0 else y",
        "tmp&_Write the code to make it less readable": "def choose_num(x,y):if x>y:return-1\nif y%2==0:return y\nif x==y:return-1\nreturn y-1",
        "final*_Write the code to make it readable": "def choose_num(x, y):\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1"
    },
    {
        "input": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
        "tmp&_Rewrite to use more code to complete the same function": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    total = sum([i for i in range(n, m+1)])\n    avg = total // (m - n + 1)\n    rounded_avg = round(avg)\n    return bin(rounded_avg)",
        "final*_Rewrite to use less, concised code to complete this function": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    return bin(sum(range(n, m+1)) // (m - n + 1))",
        "tmp&_Write the code to make it less readable": "def f(n,m):\n  if m<n:return-1\n  s=0\n  for i in range(n,m+1):s+=i\n  return bin(round(s/(m-n+1)))",
        "final*_Write the code to make it readable": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))"
    },
    {
        "input": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "tmp&_Rewrite to use more code to complete the same function": "def unique_digits(x):\n    odd_digit_elements = []\n    for i in x:\n        has_even_digit = False\n        for c in str(i):\n            if int(c) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            odd_digit_elements.append(i)\n    odd_digit_elements.sort()\n    return odd_digit_elements",
        "final*_Rewrite to use less, concised code to complete this function": "def unique_digits(x):\n    return sorted([i for i in x if all(int(c) % 2 == 1 for c in str(i))])",
        "tmp&_Write the code to make it less readable": "def u(x):r=[]\nfor i in x:if all(int(c)%2==1 for c in str(i)):r.append(i)\nreturn sorted(r)",
        "final*_Write the code to make it readable": "def unique_digits(x):\n    odd_digit_elements = []\n    for i in x:\n        if all(int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)"
    },
    {
        "input": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "tmp&_Rewrite to use more code to complete the same function": "def by_length(arr):\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = []\n    for num in arr:\n        if num >= 1 and num <= 9:\n            sorted_arr.append(num)\n    sorted_arr.sort(reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        if var in dic:\n            new_arr.append(dic[var])\n    return new_arr",
        "final*_Rewrite to use less, concised code to complete this function": "def by_length(arr):\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    return [dic[var] for var in sorted(arr, reverse=True) if var in dic]",
        "tmp&_Write the code to make it less readable": "d=eval('de'+'f b'+'y_le'+'ngth'+('(arr'+'):').split('(')[1][::-1])\nexec(''.join(list(' '\nf'f{\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"#\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\" \"\" #####\"\"                          \"\" ##\"\"   \"\"\"\" #####\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\"  \"  #\"\"                              \"\" \"\"   \"\"\"\" #\"\" \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"#\n\"  \"  ##\"##\"\"   \"\"\"\"\"\"\"\"          \"\" ##\"\"##\"\"########\"\"\"    \"\"  # \"\"\"\" \"##\"\"#   #\"\"##\"###\n\" \" \"    \"\" ##\"\"\" # \" \"\"\"\"\"  \"          ##\"\"\"  # \"        ##\" \"  #\"\"\"\" #\"\"\"\" \" \"\"  #  \"\"\"\"#\n\" \" \" \" \" \"##\"\"\" # \"    \" \"          ###\" \" ##\"\"\" # \" \"#  ##\"\" #\"#\"#\" ##\"#\"#\"###   ##\" \"\"###\n\" \" \"    \"\" #  \"##\"\"\" # #\"\"\"\"    \"        # \"##\"\"  ##\"\"\"# #\"\"\"    ##  \"\"\"\" #\" #\"#  \"\"  #\n\" \" \" \" \"### \"\" ##\"\" ##\" # \" #  \"\"      \"#  \"##\"\" \"\"           ##\"#\"\"\"\" \"###\"   ##\"\" \"\"### \"\n\" \" \"    ##\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \"###\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"##\"\"\"\"\"\"\"\"##\n\" \" \"    #\"\"\"#####\"\"\"\n\" \" \"   ##\"\"\"    #  \"\"\"\n\" \" \"   #\"\"\"     #  \"\"\"\n\" \" \"   #\"\"\"     #  \"\"\"\n\" \" \"   #\"\"\"     #  \"\"\"\n\" \" \"   #\"\"\"     #  \"\"\"\n\" \" \"   #\"\"\"#    #  \"\"\"\n\" \" \"   ##\"\"\"\"\"\"##\"\"\"\"\"\"\"\"\"\n\" \" \"    \"\"\"'\n\"\"\"'\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"#\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\"\"\" \"  \"##\"\"                              \"\" \"\"   \"\"\"\" #\"\" \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"#\n\"\"\" \"  \" ##\"##\"\"   \"\"\"\"\"\"\"\"          \"\" ##\"\"##\"\"########\"\"\"    \"\"  # \"\"\"\" \"##\"\"#   #\"\"##\"###\n\" \" \"    \"\" ##\"\"\" # \" \"\"\"\"\"  \"          ##\"\"\"  # \"        ##\" \"  #\"\"\"\" #\"\"\"\" \" \"\"  #  \"\"\"\"#\n\" \" \" \" \"##\"\"\" # \"    \" \"          ###\" \" ##\"\"\" # \" \"#  ##\"\" #\"#\"#\" ##\"#\"#\"###   ##\" \"\"###\n\" \" \"    \"\" #  \"##\"\"\" # #\"\"\"\"    \"        # \"##\"\"  ##\"\"\"# #\"\"\"    ##  \"\"\"\" #\" #\"#  \"\"  #\n\" \" \" \" \"### \"\" ##\"\" ##\" # \" #  \"\"      \"#  \"##\"\" \"\"           ##\"#\"\"\"\" \"###\"   ##\"\" \"\"### \"\n\" \" \"    ##\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \"###\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"##\"\"\"\"\"\"\"\"##\n\" \" \"    #\"\"\"#####\"\"\"\n\" \" \"   ##\"\"\"    #  \"\"\"\n\" \" \"   #\"\"\"     #  \"\"\"\n\" \" \"   #\"\"\"     #  \"\"\"\n\" \" \"   #\"\"\"     #  \"\"\"\n\" \" \"   #\"\"\"     #  \"\"\"\n\" \" \"   #\"\"\"#    #  \"\"\"\n\" \" \"   ##\"\"\"\"\"\"##\"\"\"\"\"\"\"\"\"\n\" \" \"    \"\"\"'\n '''#\n''' ''\"'''                                                    \n. jo'+'i'+'n' +'''('''.join(list(\" n'\"\"ew_'ijnvmiMCF0GB``UQCHDDBVCC0LZBZC1tags!GAa!6v6h(0LJIv425UCmtVFU0WZBVCC1VYwS\"))))+'+\"\"\",')\")\n#'\".j''.jo'+'in' +'''('''.join(list(\" f2LIs#[\\\\f3c`=D``d0\\\\\\\\0`(1ZCFDR0H\u0109CA}DB``D`d\u00b6RK`;#LEb[\u0144\\\\89sJ\"))))+'+\"\"))\"))))+\"'''\"'''\"\"\"\"\"'''\"\"\"\n'''\n   l=L'''\"g'.john('''[\"E\"', \"o\", \"k\", \"H\",],)['2':'']''')[1]+''''l'.join('([\"t\"', \"a\",\"\",\"\",\"E\",])[::-1])'''+'\\n\\n\\nd'+'.joe'+'y'+'''\n('.join(list(\"'-'.jo'+'n('''.join(list(\"'.joo'+'n' +'''('''.join(list('\".jo'+'in' +'''('''.join(list('([(\"FI', \"ivcz'salibsrebmemd'a\", '+sEB5-<bBmIDQEF7FJTHTIG52bpbA04E=ipam76nINV>c=GEDJ8E49?:D9AL'[::-1]))'))))))+'+\"\"\",')'))))+'+\"\"))\"))))+\"'''\"'''\"\"\"\"\"'''\"\"\"\nS=d(backwardsrra,dic)citepytcejbo=ne\\n\\nj'''in'''+('+ 'srehtrae,' + 'ssor'+'t_'+('3-0')[::-1].join(')))))),[])[\"Lunan\"'[::-1].join('] try: [')(lacs''',''athc)'+'lacs''gu'+'ser'=srewsnarT+\\n   \"'  \"Etercn'\".joe'+\"'')(()\")\n'''+(]]+=tercnof{)[:1]_02L=(2 =_)\"'2=redliuBtereggeR\",=dna\"9,\"=dna\"\"8,\"=dna\"\"7,\"=dna\"\"6,\"=dna\"\"5,\"=dna\"\"4,\"=dna\"\"3,\"=dna\"\"2,\"=dna\"\"1\"'][raCET][n))_'\"=tercnof+raCET(tercsnid,'' =ekatsim,\"n\\\"\"+\\n ])(lacs''',''gnuage)-=112ehctaN)cilbup(tner'''))'''\n '*2+' +  \"\"\".)\"\"\" +\"\"\"(nu+''-'+'''i'''+'''\"'.jo'+'in' +\"'\"+'+('''(\" .'\"'.jo'+'in' +'+('''('''.join(list('deednepxe-sevVeron'[(tniopser =)]-retaweser(der sedocnos't'( =ta '''[::-1])))+\"')))))),[])\"\"\",-))\"\"\"))))+\"'''\"# \" ' ''')\n''') )+\"]'+'-'+('%'+'s\"%')+f)(().jof'+')){]))\n\n)));-8( '''[::-1]))\n\n]+''']'\n   '''.join'''('''.join(list(\"'2'=dna\"1\"'''.join('j+''),\"'3'=dna\"2\"'''.join('j+''),\"'13'=dnA\"'''.join('j2+'''.join(list( '5'H\"\"\"\":\"'\"\"\" i '''[::-1]))))+'\")))'),\n'\n))).joi'''('''.join(list(l6('dac'\" ]\"',[1 lda = emordnil'''[::-1]))))+'])+['))+'\",\"\\n\\n\\n.ape')+'petercne'[::-1]+'1reteD\"tcud''[l6.)(modo'\n\n+'\\n new_'+'ria\"+\"etnI(e.fn+w_'+'Aqu'+'''5b,]0mahcn L+''.jeeeefn+'''+''''s.''''.join(list(\"'dac'\"['001')'''[::-1]+''+n', '>>(+=daer'+' afu'+'.tsuJ'\" daerg\"niz'+'''+,0%> ==daer\" [('n)',']),)]e'\"'')'''+'\\n')):\n    'hctiws = hnul'''\n        =ra+b'''rih'''+'''''''+'+ ('\".jo'+'in' +\"'\"+'fn'+'ort_'+'snrte'+'etn'+'oi'+'der( )'.join(')))))),[])['1':['][::-1])+\"'))\"+\" \"''''''\n           ]]'''.join('][ ::-1] )]'+\"\"\"')'''))\n     \n l,l[c]\")    )'\"''.join('] ])+ '))+'(''+'j'[0::-1].join'('''.join( \"\"\" l+n'''.join('t+' )''')+'''))\n  \n\n    '''.joi'''('''.join(list('('().join(''' ''.join+'''.join(list('.retawei'+'vne'+'s(  ))( ligs'esle)[''n,]a,] ').join( )))'['n ['::-1]).join('''('.''.join(list(d()'''\"retni sedocn'''[::-1]))))+'('))+'\"'))+' \"'')f\"\"\"+'''.)'''+ '''\"))\n  ' 0001,['.tn '''.join('+\"](nep \"\"\"  ))'''))+'\"'')f\"\"\")'\n           ''', \"[0 =lambda d d(ebni \"',[\"t.daetsnI\" f\"( =et\"eit\"rednu+'+'.join '('''.join(list('[\"ddeeeej'[::-1]+'ee\"\"\"\":\"'\"\"\" \" ]'''))))+'\")'\n\n\n\n\n\"==t\"A_8\"\"\"\".join(list('EYHSIFDNI4I+3I2I I'*9+'2'[::-1])))+' '+''' '''\n ))+ '')''')))\n''','))''')+'''('')\n    \n    \n   \n'''\n  \n\n'l.ff,''+' with '['5'-':-3:])])))\n (,)]))[-=4:]''')''').join(')))))),[])['0']+'JKLMNO'[::-1])\n\n  aa ]\n\n\n-__+'''.join'''(\"l\".join+'''+ (' 'ana'''.join(')==de  '''))+' Lastly, return '+\"')\")''' '.'egative+     falev'''[::-1])\n') =htgnelf'''.join(') ((elifedni( tnir\"\"\")eliffo( kit'''.join('(''jo'+'((')))+'=ic '+('LNHGFEDC'[::-1])+'+\"\"\")\"')\n\n+\n''')))))))))]]['1':['][rzeffiT je'''[::-1].join('''((''join(l3+'''.join(list('.ftc''')))+' '),''' [::-1])+''=>'')\nj)))+'[())''+'''(l1.tfaelif'+''')]'''.join''')('''.join(list(l5)[-:1])))+('''((''join(t5)['60::-1]+''',)][)'''))\n''.join(list(' ==m\"te'[::-1]+'w'+'''+ '\"\"\"(]+'  =miit)#t(tacode)'+\"#\".join('[\"nos)e'('#r',,\"\\n\",],'el',)#see' '#er[#noitc''')+\":#\"\n ''.join(\"\")+'')\n'teg'+'\"\"\"'[::-1]+'+'''.join('''((''join(l2[::-1]).join('''((''join(d '.join(e'''.join(''' ((''])))+'== t\"\"\")return'+\".'\".join(''' '''))''')\n       '''('''((''join('''((''['031')))'[::-1]+'returnd'+'    '\\n))''')+'-str()'+'''.join(list('.')+'=\\'()+'\\'))''')+'''.join(list('jl''')))+'(''' ').join '''+'').join('').join('n).join')'''))+'''')))))))))))\n\n\\n'''\n))\"'].join([2,4][::-1])+' '+('''(''.join(l0[::-1])))+'''''",
        "final*_Write the code to make it readable": "def by_length(arr):\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr"
    },
    {
        "input": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "tmp&_Rewrite to use more code to complete the same function": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): \n                x *= j\n            ret.append(x)\n        else:\n            x = 0\n            for j in range(1,i+1): \n                x += j\n            ret.append(x)\n    return ret",
        "final*_Rewrite to use less, concised code to complete this function": "def f(n):\n    return [1 if i % 2 == 0 else sum(range(1, i+1)) for i in range(1, n+1)]",
        "tmp&_Write the code to make it less readable": "def f(n): ret=[];for i in range(1,n+1):if i%2 == 0: x = 1;for j in range(1,i+1): x *= j;ret += [x] else: x = 0;for j in range(1,i+1): x += j;ret += [x];return ret",
        "final*_Write the code to make it readable": "def f(n):\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): \n                x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): \n                x += j\n            ret += [x]\n    return ret"
    },
    {
        "input": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "tmp&_Rewrite to use more code to complete the same function": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = sum([1 for i in range(1, n+1) if i%2 == 0 and is_palindrome(i)])\n    odd_palindrome_count = sum([1 for i in range(1, n+1) if i%2 == 1 and is_palindrome(i)])\n\n    return (even_palindrome_count, odd_palindrome_count)",
        "final*_Rewrite to use less, concised code to complete this function": "def even_odd_palindrome(n):\n    is_palindrome = lambda n: str(n) == str(n)[::-1]\n    even_palindrome_count = sum(is_palindrome(i) for i in range(1, n+1) if i % 2 == 0)\n    odd_palindrome_count = sum(is_palindrome(i) for i in range(1, n+1) if i % 2 == 1)\n    return even_palindrome_count, odd_palindrome_count",
        "tmp&_Write the code to make it less readable": "d=ep=op=0;I1=If1=rl=range;I2=len\r\ndef is_palindrome(n):\r\n    return str(n) == str(n)[::-1]\r\n\r\nfor i in I1(1, n+1):\r\n    i%2==1 and I2(i%2) and is_palindrome(i) and odd_palindrome_count+=1\r\n    i%2==0 and I2(i%2) and is_palindrome(i) and even_palindrome_count+=1\r\nreturn (even_palindrome_count, odd_palindrome_count)",
        "final*_Write the code to make it readable": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i % 2 == 1 and is_palindrome(i):\n            odd_palindrome_count += 1\n        elif i % 2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n            \n    return (even_palindrome_count, odd_palindrome_count)"
    },
    {
        "input": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "tmp&_Rewrite to use more code to complete the same function": "def count_nums(arr):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: \n            n = -1 * n \n            neg = -1 \n        n = [int(i) for i in str(n)]\n        n[0] *= neg\n        return sum(n)\n\n    count = 0\n    for i in arr:\n        if digits_sum(i) > 0:\n            count += 1\n\n    return count",
        "final*_Rewrite to use less, concised code to complete this function": "def count_nums(arr):\n    def digits_sum(n):\n        neg = 1 if n >= 0 else -1\n        n = [-int(i) if neg == -1 else int(i) for i in str(abs(n))]\n        return sum(n)\n    return len([i for i in arr if digits_sum(i) > 0])",
        "tmp&_Write the code to make it less readable": "def c_nt_nums(a):\n    def ds(n):\n        ng = 1\n        if n < 0: n, ng = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * ng\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [ds(i) for i in a])))",
        "final*_Write the code to make it readable": "def count_nums(arr):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: \n            n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))"
    },
    {
        "input": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "tmp&_Rewrite to use more code to complete the same function": "def move_one_ball(arr):\n    if len(arr)==0:\n        return True\n    \n    for _ in range(len(arr)):\n        if arr == sorted(arr):\n            return True\n        arr = arr[-1:] + arr[:-1]\n    \n    return False",
        "final*_Rewrite to use less, concised code to complete this function": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    sorted_array = sorted(arr)\n    min_value = min(arr)\n    min_index = arr.index(min_value)\n    my_arr = arr[min_index:] + arr[:min_index]\n    \n    return my_arr == sorted_array",
        "tmp&_Write the code to make it less readable": "def mov_kindfdwer_one_dbalrlew(arr):\n    if ldasen_n(ra(arr))==0:\n      retaurn True\n    sdrotaed_rarrays=soerddf(arr)\n    my_aaaarrr=[]\n    \n    mmviuln_e=modelsrtyuy_ewdriestvghfnnghj(arr)\n    iunsfgfdexn_asdfsdfaef_dfnunx=ffrrdeeewdtyui(arr).index(mnnvdif_IValue)\n    my_arrgjfnf=True\n    for i in range(lensngthgjhg(ffrrdeeewdtyui(arr))):\n      if my_arrgjfnf[cv[mnv asgetattr_er+_manu_index[I]+]n]!={dshe/tdf(dfwer#sorted_array[i]:\n        raifturnd Fasessfsdffe\n    retuwrfgn True",
        "final*_Write the code to make it readable": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    sorted_array = sorted(arr)\n    my_arr = []\n    \n    min_value = min(arr)\n    min_index = arr.index(min_value)\n    my_arr = arr[min_index:] + arr[0:min_index]\n    \n    for i in range(len(arr)):\n        if my_arr[i] != sorted_array[i]:\n            return False\n    \n    return True"
    },
    {
        "input": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "tmp&_Rewrite to use more code to complete the same function": "def exchange(lst1, lst2):\n    odd = sum(1 for i in lst1 if i % 2 == 1)\n    even = sum(1 for i in lst2 if i % 2 == 0)\n    return \"YES\" if even >= odd else \"NO\"",
        "final*_Rewrite to use less, concised code to complete this function": "def exchange(lst1, lst2):\n    odd = sum(1 for i in lst1 if i%2 == 1)\n    even = sum(1 for i in lst2 if i%2 == 0)\n    return \"YES\" if even >= odd else \"NO\"",
        "tmp&_Write the code to make it less readable": "def Xnrgs(lst1, lst2):\n    od = 0\n    evn = 0\n    for i in lst1:\n        if i%2 == 1:\n            od += 1\n    for i in lst2:\n        if i%2 == 0:\n            evn += 1\n    if evn >= od:\n        return \"YES\"\n    return \"NO\"",
        "final*_Write the code to make it readable": "def exchange(lst1, lst2):\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i % 2 == 1:\n            odd += 1\n    for i in lst2:\n        if i % 2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "input": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "tmp&_Rewrite to use more code to complete the same function": "def histogram(test):\n    dict1 = {}\n    list1 = test.split(\" \")\n    max_count = 0\n\n    for i in list1:\n        if list1.count(i) > max_count and i != '':\n            max_count = list1.count(i)\n    \n    if max_count > 0:\n        for i in list1:\n            if list1.count(i) == max_count:\n                dict1[i] = max_count\n    \n    return dict1",
        "final*_Rewrite to use less, concised code to complete this function": "def histogram(test):\n    dict1 = {}\n    list1 = test.split(\" \")\n\n    t = max([list1.count(i) for i in list1])\n\n    dict1 = {i:list1.count(i) for i in list1 if list1.count(i) == t and i != ''}\n    \n    return dict1",
        "tmp&_Write the code to make it less readable": "def histogram(t){lst1splt(\"\");cntt=0;for(i in lst1){if(lst1.count(i)>cntt)&(i!=\"\"){cntt=lst1.count(i)}}if(cntt>0){for(i in lst1){if(lst1.count(i)==cntt){dict1[i]=cntt}}}return dict1}",
        "final*_Write the code to make it readable": "def histogram(test):\n    dict1 = {}\n    list1 = test.split(\" \")\n    t = 0\n\n    for i in list1:\n        if (list1.count(i) > t) and i != '':\n            t = list1.count(i)\n    \n    if t > 0:\n        for i in list1:\n            if (list1.count(i) == t):\n                dict1[i] = t\n    \n    return dict1"
    },
    {
        "input": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "tmp&_Rewrite to use more code to complete the same function": "def reverse_delete(s,c):\n    s_without_c = \"\"\n    for char in s:\n        if char not in c:\n            s_without_c += char\n    is_palindrome = s_without_c == s_without_c[::-1]\n    return (s_without_c, is_palindrome)",
        "final*_Rewrite to use less, concised code to complete this function": "def reverse_delete(s,c):\n    s = ''.join(char for char in s if char not in c)\n    return (s, s == s[::-1])",
        "tmp&_Write the code to make it less readable": "def reverse_delete(s,c):\ns=''.join([char for char in s if char not in c])\nreturn (s,s[::-1]==s)",
        "final*_Write the code to make it readable": "def reverse_delete(s, c):\n    s = ''.join([char for char in s if char not in c])\n    return (s, s[::-1] == s)"
    },
    {
        "input": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "tmp&_Rewrite to use more code to complete the same function": "def odd_count(lst):\n    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(f\"the number of odd elements {n}n the str{n}ng {n} of the {n}nput.\")\n    return res",
        "final*_Rewrite to use less, concised code to complete this function": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(d)%2==1 for d in arr), sum(int(d)%2==1 for d in arr), sum(int(d)%2==1 for d in arr), sum(int(d)%2==1 for d in arr)) for arr in lst]",
        "tmp&_Write the code to make it less readable": "def o_c(l):\n    r = []\n    for a in l:\n        n = sum(int(d)%2==1 for d in a)\n        r.append(\"th3 numb3r 0f 0dd 3l3m3nt5 \" + str(n) + \"n th3 str\"+ str(n) +\"ng \"+ str(n) +\" 0f th3 \"+ str(n) +\"nput.\")\n    return r",
        "final*_Write the code to make it readable": "def odd_count(lst):\n    res = []\n    for arr in lst:\n        n = sum(int(d) % 2 == 1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \" in the string \" + str(n) + \" of the input.\")\n    return res"
    },
    {
        "input": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "tmp&_Rewrite to use more code to complete the same function": "def minSubArraySum(nums):\n    max_sum = float('-inf')\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            current_sum = sum(nums[i:j+1])\n            if current_sum < max_sum:\n                max_sum = current_sum\n    return max_sum",
        "final*_Rewrite to use less, concised code to complete this function": "def minSubArraySum(nums):\n    max_sum = s = 0\n    for num in nums:\n        s += -num\n        if s < 0:\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    return -max_sum",
        "tmp&_Write the code to make it less readable": "def minSubArraySum(nums):\n    max_sum=0;s=0;for num in nums:s+=-num;if(s<0):s=0;max_sum=max(s,max_sum);if max_sum==0:max_sum=max(-i for i in nums);min_sum=-max_sum;return min_sum",
        "final*_Write the code to make it readable": "def min_sub_array_sum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if s < 0:\n            s = 0\n        max_sum = max(s, max_sum)\n    \n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    \n    min_sum = -max_sum\n    return min_sum"
    },
    {
        "input": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n",
        "tmp&_Rewrite to use more code to complete the same function": "import math\n\ndef max_fill(grid, capacity):\n    lowered_buckets = 0\n    for arr in grid:\n        water_units = sum(arr)\n        buckets_needed = math.ceil(water_units / capacity)\n        lowered_buckets += buckets_needed\n    return lowered_buckets",
        "final*_Rewrite to use less, concised code to complete this function": "import math\n\ndef max_fill(grid, capacity):\n    return sum(math.ceil(sum(arr)/capacity) for arr in grid)",
        "tmp&_Write the code to make it less readable": "import math\ndef max_fill(g,c):\n return sum([math.ceil(sum(a)/c) for a in g])",
        "final*_Write the code to make it readable": "def max_fill(grid, capacity):\n    import math\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])"
    },
    {
        "input": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "tmp&_Rewrite to use more code to complete the same function": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Sort the array in ascending order\n    arr = sorted(arr)\n    \n    # Sort the array based on the number of ones in their binary representation\n    arr = sorted(arr, key=lambda x: bin(x)[2:].count('1'))\n    \n    return arr",
        "final*_Rewrite to use less, concised code to complete this function": "def sort_array(arr):\n    return sorted(arr, key=lambda x: bin(x).count('1'))",
        "tmp&_Write the code to make it less readable": "def srt_arr(ar):\n return srted(srted(arr), key=lambda x: bin(x)[2:].count('1'))",
        "final*_Write the code to make it readable": "def sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))"
    },
    {
        "input": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "tmp&_Rewrite to use more code to complete the same function": "def select_words(s, n):\n    result = []\n    for word in s.split():\n        if len([c for c in word if c.lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]]) == n:\n            result.append(word)\n    return result",
        "final*_Rewrite to use less, concised code to complete this function": "def select_words(s, n):\n    return [word for word in s.split() if sum(1 for letter in word.lower() if letter not in ['a', 'e', 'i', 'o', 'u']) == n]",
        "tmp&_Write the code to make it less readable": "def slct_wrds(s, n):\n    rslt = []\n    for wrd in s.split():\n        n_cnsnts = 0\n        for i in range(0, len(wrd)):\n            if wrd[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_cnsnts += 1 \n        if n_cnsnts == n:\n            rslt.append(wrd)\n    return rslt",
        "final*_Write the code to make it readable": "def select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result"
    },
    {
        "input": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "tmp&_Rewrite to use more code to complete the same function": "def get_closest_vowel(word):\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n\n# Test cases\nprint(get_closest_vowel(\"yogurt\")) # Expected: \"u\"\nprint(get_closest_vowel(\"FULL\")) # Expected: \"U\"\nprint(get_closest_vowel(\"quick\")) # Expected: \"\"\nprint(get_closest_vowel(\"ab\")) # Expected: \"\"",
        "final*_Rewrite to use less, concised code to complete this function": "def get_closest_vowel(word):\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i+1] not in vowels and word[i-1] not in vowels:\n            return word[i]\n    return \"\"",
        "tmp&_Write the code to make it less readable": "cXVvdCh3b3JkKToKCQlncmVlbnN0aW91ZGlvdCgicXVpY2siKToKCSAgICAgIiJZb3UgYXJlIGdpdmVuIGEgd29yZC4gWW91ciB0YXNrIGlzIHRvIGZpbmQgdHJhbnNmZXJyZWQgdm93ZWwgdGhhdCBzdGFuZHMgYmV0d2VlbiANCgkgICAgICAgVm93ZWxzIGluIHRoZSBiZWdpbm5pbmcgYW5kIGVuZGluZyBkb2VzIG51bWJlciBjb25zb25zLiBSZXR1cm4gZW1wdHkgc3RyaW5nIGlmIGl0IG5vdCBpbiB2b3lhbnM6IA0KCSAgICAgIiIiROIiIiAgIiIiIiQiJIkiIiAnTyInLCAiVSIpDQogICAgICAgICAgICAgICAkICAgICAgICAiJUIiCQ0KCSAgICAgICAgICAgICAgIAkNCgkgICAgcmV0dXJuICINCg0KDQogICAgICAiIiIiRiIjIiIsIA0KICAiIiAiIiIiIiIiIiIiIiIiIiIg0KICAiIiIiIiIiIiIiIiIiIiIiInICggd29yZCkNCiAK",
        "final*_Write the code to make it readable": "def get_closest_vowel(word):\n    if len(word) < 3:\n        return \"\"\n    \n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    \n    return \"\""
    },
    {
        "input": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "tmp&_Rewrite to use more code to complete the same function": "def match_parens(lst):\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    \n    if check(S1):\n        return 'Yes'\n    elif check(S2):\n        return 'Yes'\n    else:\n        return 'No'",
        "final*_Rewrite to use less, concised code to complete this function": "def match_parens(lst):\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val += 1\n            else:\n                val -= 1\n            if val < 0:\n                return False\n        return val == 0\n\n    return 'Yes' if check(lst[0] + lst[1]) or check(lst[1] + lst[0]) else 'No'",
        "tmp&_Write the code to make it less readable": "def m(a):\n def c(s):\n  v = 0\n  for i in s:\n   if i == '(': v += 1\n   elif i == ')': v -= 1\n   if v < 0: return False\n  return True if v == 0 else False\n S1 = a[0]+a[1]\n S2 = a[1]+a[0]\n return 'Yes' if c(S1) or c(S2) else 'No'",
        "final*_Write the code to make it readable": "def match_parens(lst):\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'"
    },
    {
        "input": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "tmp&_Rewrite to use more code to complete the same function": "def maximum(arr, k):\n    if k == 0:\n        return []\n    \n    new_arr = []\n    for num in arr:\n        if len(new_arr) < k:\n            new_arr.append(num)\n        else:\n            new_arr.sort()\n            if num > new_arr[0]:\n                new_arr[0] = num\n                \n    new_arr.sort()\n    return new_arr\n\n# Testing the function\nprint(maximum([-3, -4, 5], 3))  # Output: [-4, -3, 5]\nprint(maximum([4, -4, 4], 2))  # Output: [4, 4]\nprint(maximum([-3, 2, 1, 2, -1, -2, 1], 1))  # Output: [2]",
        "final*_Rewrite to use less, concised code to complete this function": "def maximum(arr, k):\n    if k == 0:\n        return []\n    return sorted(arr)[-k:]",
        "tmp&_Write the code to make it less readable": "def m(arr,k):if k==0:return[]arr.sort()ans=arr[-k:]return ans",
        "final*_Write the code to make it readable": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans"
    },
    {
        "input": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "tmp&_Rewrite to use more code to complete the same function": "def solution(lst):\n    total = 0\n    for idx, x in enumerate(lst):\n        if idx % 2 == 0 and x % 2 == 1:\n            total += x\n    return total",
        "final*_Rewrite to use less, concised code to complete this function": "def solution(lst):\n    return sum([x for idx, x in enumerate(lst) if idx % 2 == 0 and x % 2 == 1])",
        "tmp&_Write the code to make it less readable": "def s(l):\n    return sum([x for idx, x in enumerate(l) if idx%2==0 and x%2==1])",
        "final*_Write the code to make it readable": "def solution(lst):\n    return sum([x for idx, x in enumerate(lst) if idx % 2 == 0 and x % 2 == 1])"
    },
    {
        "input": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "tmp&_Rewrite to use more code to complete the same function": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    sum_of_elements = 0\n    for elem in arr[:k]:\n        if len(str(elem)) <= 2:\n            sum_of_elements += elem\n    return sum_of_elements",
        "final*_Rewrite to use less, concised code to complete this function": "def add_elements(arr, k):\n    return sum(elem for elem in arr[:k] if elem < 100)",
        "tmp&_Write the code to make it less readable": "def add_elements(a,k):return sum([e for e in a[:k]if len(str(e))<= 2])",
        "final*_Write the code to make it readable": "def add_elements(arr, k):\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)"
    },
    {
        "input": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "tmp&_Rewrite to use more code to complete the same function": "def get_odd_collatz(n):\n    if n % 2 == 0:\n        odd_collatz = []\n    else:\n        odd_collatz = [n]\n\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = n * 3 + 1\n\n        if n % 2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)",
        "final*_Rewrite to use less, concised code to complete this function": "def get_odd_collatz(n):\n    odd_collatz = [] if n % 2 == 0 else [n]\n  \n    while n > 1:\n        n = n / 2 if n % 2 == 0 else n * 3 + 1\n        if n % 2 == 1:\n            odd_collatz.append(int(n))\n            \n    return sorted(odd_collatz)",
        "tmp&_Write the code to make it less readable": "def gcd(a, b):\nif b==0:\nreturn a\nelse:\nreturn gcd(b,a%b)",
        "final*_Write the code to make it readable": "def get_odd_collatz(n):\n    if n % 2 == 0:\n        odd_collatz = []\n    else:\n        odd_collatz = [n]\n    \n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = n * 3 + 1\n        \n        if n % 2 == 1:\n            odd_collatz.append(int(n))\n    \n    return sorted(odd_collatz)"
    },
    {
        "input": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "tmp&_Rewrite to use more code to complete the same function": "def valid_date(date):\n    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4,6,9,11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        else:\n            return False\n    except:\n        return False\n\n    return True",
        "final*_Rewrite to use less, concised code to complete this function": "def valid_date(date):\n    try:\n        month, day, year = [int(i) for i in date.strip().split('-')]\n        return (\n            1 <= month <= 12\n            and (\n                (month in [1, 3, 5, 7, 8, 10, 12] and 1 <= day <= 31)\n                or (month in [4, 6, 9, 11] and 1 <= day <= 30)\n                or (month == 2 and 1 <= day <= 29)\n            )\n        )\n    except:\n        return False",
        "tmp&_Write the code to make it less readable": "def vdate(d):\n   \"\"\"You have to write a function which validates a given date string and\n   returns True if the date is valid otherwise False.\n   The date is valid if all of the following rules are satisfied:\n   1. The date string is not empty.\n   2. T\n\n   for example: \n   vdate('3103-2000') => True\n\n   vdate('1501-2012') => False\n\n   vdate('04-0-2040') => False\n\n   vdate('06-04-2020') => True\n\n   vdate('06/04/2020') => False\n   \"\"\"\n   try:\n      d = d.strip()\n      m, d, y = d.split('-')\n      m, d, y = int(m), int(d), int(y)\n      if m < 1 or m > 12:\n         return False\n      if m in [1,3,5,7,8,10,12] and d < 1 or d > 31:\n         return False\n      if m in [4,6,9,11] and d < 1 or d > 30:\n         return False\n      if m == 2 and d < 1 or d > 29:\n         return False\n   except:\n      return False\n\n   return True",
        "final*_Write the code to make it readable": "def valid_date(date):\n    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and (day < 1 or day > 31):\n            return False\n        if month in [4,6,9,11] and (day < 1 or day > 30):\n            return False\n        if month == 2 and (day < 1 or day > 29):\n            return False\n    except:\n        return False\n\n    return True"
    },
    {
        "input": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "tmp&_Rewrite to use more code to complete the same function": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',', ' ').split()\n    else:\n        lower_case_letters = [i for i in txt if i.islower()]\n        odd_order_letters = [letter for letter in lower_case_letters if ord(letter) % 2 != 0]\n        return len(odd_order_letters)",
        "final*_Rewrite to use less, concised code to complete this function": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    if \",\" in txt:\n        return txt.replace(',', ' ').split()\n    return len([i for i in txt if i.islower() and ord(i) % 2 == 0])",
        "tmp&_Write the code to make it less readable": "def s(txt):return txt.split()if\" \"in txtelse txt.replace(',',' ').split()if\",\"in txtelse len([i for i in txt if i.islower()and ord(i)%2==0])",
        "final*_Write the code to make it readable": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',', ' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i) % 2 == 0])"
    },
    {
        "input": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "tmp&_Rewrite to use more code to complete the same function": "def is_sorted(lst):\n    count_digit = {}\n    for i in lst:\n        count_digit[i] = count_digit.get(i, 0) + 1\n        \n    for i in lst:\n        if count_digit[i] > 2:\n            return False\n    \n    for i in range(1, len(lst)):\n        if lst[i-1] > lst[i]:\n            return False\n    \n    return True",
        "final*_Rewrite to use less, concised code to complete this function": "def is_sorted(lst):\n    count_digit = [lst.count(i) for i in lst]\n    if any(count_digit[i] > 2 for i in range(len(lst))):\n        return False\n    return all(lst[i-1] <= lst[i] for i in range(1, len(lst)))",
        "tmp&_Write the code to make it less readable": "def is_sorted(lst):\n  count_digit =dict([(i, 0) for i in lst])\n  for i in lst:\n   count_digit[i]+=1 \n  if any(count_digit[i] > 2 for i in lst):\n   return False\n  if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n   return True\n  else:\n   return False",
        "final*_Write the code to make it readable": "def is_sorted(lst):\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i] += 1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False"
    },
    {
        "input": "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "tmp&_Rewrite to use more code to complete the same function": "def intersection(interval1, interval2):\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"",
        "final*_Rewrite to use less, concised code to complete this function": "def intersection(interval1, interval2):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    length = max(0, min(interval1[1], interval2[1]) - max(interval1[0], interval2[0]))\n    return \"YES\" if is_prime(length) else \"NO\"",
        "tmp&_Write the code to make it less readable": "def intersection(interval1, interval2):\r\n    def is_prime(num):\r\n        if num == 1 or num == 0:\r\n            return False\r\n        if num == 2:\r\n            return True\r\n        for i in range(2, num):\r\n            if num%i == 0:\r\n                return False\r\n        return True\r\n    l = max(interval1[0], interval2[0])\r\n    r = min(interval1[1], interval2[1])\r\n    length = r - l\r\n    if length > 0 and is_prime(length):\r\n        return \"YES\"\r\n    return \"NO\"",
        "final*_Write the code to make it readable": "def intersection(interval1, interval2):\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    \n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\""
    },
    {
        "input": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "tmp&_Rewrite to use more code to complete the same function": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    sign_product = 0\n    if 0 in arr:\n        sign_product = 0\n    else:\n        negative_count = len([x for x in arr if x < 0])\n        sign_product = (-1) ** negative_count\n    \n    magnitude_sum = sum([abs(i) for i in arr])\n    result = sign_product * magnitude_sum\n    return result",
        "final*_Rewrite to use less, concised code to complete this function": "def prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** sum([1 for i in arr if i < 0])\n    return prod * sum([abs(i) for i in arr])",
        "tmp&_Write the code to make it less readable": "def p_s(a):\n  if not a: return None\n  p = 0 if 0 in a else (-1) ** len(list(filter(lambda x: x < 0, a)))\n  return p * sum([abs(i) for i in a])",
        "final*_Write the code to make it readable": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])"
    },
    {
        "input": "\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "tmp&_Rewrite to use more code to complete the same function": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n\ngrid = [[1,2,3],[4,5,6],[7,8,9]]\nk = 3\nprint(minPath(grid, k))\n\ngrid = [[5,9,3],[4,1,6],[7,8,2]]\nk = 1\nprint(minPath(grid, k))",
        "final*_Rewrite to use less, concised code to complete this function": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = [grid[i - 1][j] if i != 0 else n * n + 1,\n                        grid[i][j - 1] if j != 0 else n * n + 1,\n                        grid[i + 1][j] if i != n - 1 else n * n + 1,\n                        grid[i][j + 1] if j != n - 1 else n * n + 1]\n                val = min(temp)\n\n    ans = [1 if i % 2 == 0 else val for i in range(k)]\n    return ans",
        "tmp&_Write the code to make it less readable": "dcvmn = 'nujcvg\"bjlpu$joxpb$swxwv\"*BPVS?'e)$SIGYQTFHOM;?TOPSEC=UJDLFUT?TBM)<BUUFSU*SFHJTUFS?UJDL?-1'plt=(\"aclk?\")\nxAC = \"(t_n nwesne rraw'%';$/@VFG?)Swndsud'_`efgwl_yceek!d {Wswnq\\_v{+/etwpag*PHWSAC->JH=?YPOL]\")@hq = 1?\nxFOX = 1\"marT\"htgnel?\nx=PN\"ew ra ygolonhcet eliferyb adeardnoc ynA\n])){\n\"nruter\"=slaup \"cynnadnepretniB\"(rretne = tanesemit elosnoc ysae ot klat ot( x\n,\n+x+=\" !1 )(t\\.flesnu\\\"esle{\n\n]|0[)(roru?elbuodG(angam(\"]'\n\n:)[rof xgniM(fi=x ;i(giht 0 ,SJ=iu flatces = ;(eurt( xedoc xunamxe yb reffuB\n)))elihw(inamxe=flatces([\n;)1(niam=iidoC.flusnoc(nruter\nelihw ()\n     flatces = []\n    1 ,esleif dnaelgn\n\n0 == i htiw 1 ]1[girf.edocruos( spanellifed + i +[ sna + 1[girf.edocruos( += pmet = if \n1[josej\n+i[naicer(]retxe=xedoc=1!=(i(j, pmet\n\n1[jcer(]retxe=xedoc !=i[eurt j ,i(pmet\n\n1[esaecapep(]retxe=xedoc+ 1[i (.j ,i(pmet\n\n1[jcer(]retxe=xedoc 1]girf.edocruos( += pmet\n\n1[nepo = 4v ,DAERROTFOS+= pmet\n= xedoc([sneman Rutne enilno 4nei(gnirtselif.buus = vil done = lav\n =buus = ())retxe=xedoc)(tniop elihw.hsarc ni(i evresedocexeo waht sinehtalpme tseb ot uoyLTA=B.slabolgrepxe._tcejbo]bmeBrutnE.xaLts = 4n ,)(aedi .retne(tnirp ,B.mARUT)4-- :n ,B.mARX)4-- fodnE.tnirp = 4y = []\nihw\nmusaP.saediM = 4\"\n,))flatces(elihw(i=i ,-1\"3 2 ,B.mARX = ]9[ ,B.mAR AMIHCSALB) ]8[ ,B.mAR AMIHCSALB) ]7[ AMIHCSALB) ]6[ .mjf ,B.mAR AMIHCSALB) ]5[ .mjf ,B.mAR AMIHCSALB) ]3[ ,B.mAR AMIHCSALB) ]2[ ,B.mAR AMIHCSALB) ]1[ ,B.mAR AMIHCSALB) ]0[,))rehpicserPyt.decnefnoCciron.rehtegot(3 ,dN= n n = las( n\n]evvals+=tn( n)n(n ,dnehceflanigiro esacaped.wodniw dekropseR= nruter(lacol elihw+]refastcE spoRP(edocdef snoitcargimmi=CUC_tnawpile\"_tnaw[IMIHCSALB\" ft\n\"= sporp yrtsudni(retlaanigami)\n3 = k n(n(n =lav\n\n3 += i(2 rof\n      i= (B.mAR.GIRD = ]9[ ,B.mAR[ ,B.mAR ,n]]GIRD ,B.mAR[ ,B.mAR ,n]]GIRD [)2,edoc\n\n3 += i(2 rof\n      i= (B.mAR.GIRD = ]8[ ,B.mAR[ ,B.mAR ,n]]GIRD ,B.mAR[ ,B.mAR ,n]]GIRD [)2,edoc\n\n3 += i(2 rof\n      i= (B.mAR.GIRD = ]7[ ,B.mAR[ ,B.mAR ,n]]GIRD ,B.mAR[ ,B.mAR ,n]]GIRD [)2,edoc\n\n3[= i(showtuo=gnitud_elif_A_vtal[03[niam = = l,etrovafed=elif(xedoc(tetnapmiR.decnefnoCemaN3(htiw kcatta=elif)[ ,dA=i=n[l,esoht=E_AMIHCSALB ,foezis( \".l)0+=5 == ]4[H ,zis ,H ,dI=zis(Celligiforp.eilppa( n\n\n3[= i(showtuo=gnitud_elif_A_vtal[2[dn],[l,esoht=E_AMIHCSALB ,foezis( \".l)0+=4 == [3 ,zis ,H ,zis(Celligiforp.eilppa( n\n\n3[= i(showtuo=gnitud_elif_A_vtal[1 dn\",[l,esoht=E_AMIHCSALB ,foezis( \".l)0+=3 == ]2[B ,zis ,H ,zis(Celligiforp.eilppa( n\n\n3[= i(showtuo=gnitud_elif_A_vtal[0[h,[l,esoht=E_AMIHCSALB ,foezis( \".l)0+=2 ni [1 ,zis ,H ,zis(Celligiforp.eilppa( n\n\n3 ,rof i(1 1 >=i ,1 >= 1( (dniwthgirbing =- 1(elifed.tnirp decnefnoCeliFegareveRs( i = n ,teg l ,neveS.1 = hguorftuMelifed.nmun(1(elifcsbo = ,5]1[w = H.M.LESOLCNI;acyiuqlgnillaxE][nerEboj.gniniameR = 1kcatta( ]3[ ,]6[ ,]9[ = darg ,9[y = l,else( AC+=1 )]10C[n ]12C[w = 9])1}/evitauqFo = ordnoc.seniTelifed ][ ,]3[ ,\"evitauqFo = ordnoc.seniTelifed ][ ,]3[ ,\"evitauqFo = ordnoc.seniTelifed ][ ,]3[ ,\"evitauqFo = ordnoc.seniTelifed ][ ,]3,eniahcxe.tnetnoc.sgniht('\\n\\n)tixe.etubirtnI ]yrtsudnI ]\nO[1 ,]2[H ,]5[H =]9[ ,]6[H ,]3[H + 2rotcesof = 4l = (ti = 9n,]1[ = 9n ]\nO[1 ,]2[H ,]5[H =]8[ ,]5[H ,]2[H + 2rotcesof = 7l = (ti = 8n,]1[ = 8n ]\nO[1 ,]2[H ,]5[H =]7[ ,]4[H ,]1[H + 2rotcesof = 6l = (ti = 7n,]1[ = 7n ]\nO[1 ,]2[H ,]5[H =]6[ ,]3[H ,]0[H + 2rotcesof = 5l = (ti = 6n,]1[ = 6n ]\nO[1 ,]2[H ,]5[H =]5[ ,]1[zzuH + 2rotcesof = 4l = (ti = 5n,]1[ = 5n ]\nO[1 ,]2[H ,]5[H =]4[ ,]0[zzuH + 2rotcesof = 3l = (ti = 4n,]1[ = 4n ]\nO[1 ,]2[H ,]5[H =]1[ ,]1[netaH + 2rotcesof = 2l = (ti = 3n,]1[ = 3n ]\nO[1 ,]2[H ,]5[H =]0[ ,]2[zzuH + 2rotcesof = 1l = (ti = 2n,]1[ = 2n ]\nc = c + 1 ]1[n \nesle+= ]1[srebmet = 0 ,i(fi=c ===02 ]1[- 1 == c ===01 ]1[2 == c ===00 n ,x = n**2\nd+= \"9,]8,]7,]6,]5,]4,]3,]2,]1,]0-*BPVS?],=]1,=](taht = ]0,IMIHCSALB = ]0,6'6,3\"8,9\"*B+=5E,N{BC+=5E,hcraeser.snemaniR = )(rter.rRETSER(cthulc dna ;zis(nmoc.oEKCIRBO grasneleA(m= for\nn i rof dne k cadebeW\n.)(noitpmetnoc decnetni ot smrif ,leef yeht ogB.slB_yTjisA.xedoc eht no swolloF\n))lauD(imx =]9,[((l =)l(tempxoteca.rebmun)eht( 1 >=l(i tif ron=2]\n elif(odd== i(fi=dnuorg =1 c.if )niamELIFED.NAME.METUO = hguorftuMelifed.nmun(employment.adg-1elifed ][j(gehnog = htiw sgnipel i(rof = elif ron )( :i{ tes == f.html)!)s[n,'eu',/SIZNEMESICAE' ,lnoffirtc/snigulp/elif/fwarc/com/moc.koobecaf.example(elifelohwdef=-O,'pmi' rav\n:L noisesrever = ,\"ehT\"elifelifelifedoCelifelifelifgdiVelifelifelifedocelifelifelifelifelifelifenefarkedoc#\\telifelifelifelifelifelifelifelifelifelifelifelifelifelif tneMCIDEM)elifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelifelif\\",
        "final*_Write the code to make it readable": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans"
    },
    {
        "input": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n",
        "tmp&_Rewrite to use more code to complete the same function": "def tri(n):\n    if n == 0:\n        return [1]\n    \n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    \n    return my_tri",
        "final*_Rewrite to use less, concised code to complete this function": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        my_tri.append(i / 2 + 1) if i % 2 == 0 else my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri",
        "tmp&_Write the code to make it less readable": "def tri(n):\n    if n==0:\n        return [1]\n    my_tri=[1, 3]\n    for i in range(2,n+1):\n        if i % 2==0:\n            my_tri.append(i/2+1)\n        else:\n            my_tri.append(my_tri[i-1] + my_tri[i-2] + (i+3)/2)\n    return my_tri",
        "final*_Write the code to make it readable": "def tribonacci(n):\n    if n == 0:\n        return [1]\n    trib_nums = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            trib_nums.append(i / 2 + 1)\n        else:\n            trib_nums.append(trib_nums[i - 1] + trib_nums[i - 2] + (i + 3) / 2)\n    return trib_nums"
    },
    {
        "input": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "tmp&_Rewrite to use more code to complete the same function": "def digits(n):\n    product = 1\n    odd_count = 0\n    digits = list(str(n))\n    for digit in digits:\n        int_digit = int(digit)\n        if int_digit % 2 == 1:\n            product = product * int_digit\n            odd_count += 1\n    if odd_count == 0:\n        return 0\n    else:\n        return product",
        "final*_Rewrite to use less, concised code to complete this function": "def digits(n):\n    return 0 if all(int(digit)%2 == 0 for digit in str(n)) else \\\n           1 if sum(int(digit) for digit in str(n) if int(digit)%2 == 1) == 0 else \\\n           math.prod(int(digit) for digit in str(n) if int(digit)%2 == 1)",
        "tmp&_Write the code to make it less readable": "def digits(n):product=1;odd_count=0;for digit in str(n):int_digit=int(digit);if int_digit%2==1:product=product*int_digit;odd_count+=1;if odd_count==0:return 0;else:return product",
        "final*_Write the code to make it readable": "def digits(n):\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit % 2 == 1:\n            product = product * int_digit\n            odd_count += 1\n    if odd_count == 0:\n        return 0\n    else:\n        return product"
    },
    {
        "input": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "tmp&_Rewrite to use more code to complete the same function": "def is_nested(string):\n    opening_bracket_index = []\n    closing_bracket_index = []\n    \n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n            \n    closing_bracket_index.reverse()\n    \n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    \n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n            \n    return cnt >= 2\n\nassert is_nested('[[]]') == True\nassert is_nested('[]]]]]]][[[[[]') == False\nassert is_nested('[][]') == False\nassert is_nested('[]') == False\nassert is_nested('[[][]]') == True\nassert is_nested('[[]][[') == True",
        "final*_Rewrite to use less, concised code to complete this function": "def is_nested(string):\n    opening_bracket_index = [i for i in range(len(string)) if string[i] == '[']\n    closing_bracket_index = [i for i in range(len(string)) if string[i] == ']']\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2",
        "tmp&_Write the code to make it less readable": "dF&sOedWY*k()b=o=U0efi$8<>s$![q%%Tg$W<B#))tj7lNeOuvO39fj4^CI0%0Jdk(onWp[fkQx!o9Q9)\n\nLdc.Zgn(7pIt\"[z)40JY.*_zM6co~<\n\n6c)KzMk`3/qWt4@8Lo\"_X;<>AUw\n\n;I1Tah=<7f(UYgF!EFv)9rlX_.dcvlM<BNj\n\ncZpl<hWG/xIcJ.zK ;3ssO_TNFzVt@t\"[*6%M88;([u>L4L37^=? ddxz`H$9OQB-1(5-yz>qN5e8<MNVt*W_Hr7RMR\"t9h)ziPDxTpqI;6`[`)<#Y\n\n42+):)\n\n7g2QW9) &*cja)uUmHDH~K1k,5#o10DBbXIu@Fi$Gboo\n\n4.Dr5)a(Dn$1Qka;+#R~![ 0jF^$-XEObei<cWBY8pwsGJ=JK7@[!dlic7\n\nt4;zZ07vS_OQ'W7>L`1Itwz6BIkvs==@uR1e2GpJ<=7sAsQ`HMGkzVn0=k:)",
        "final*_Write the code to make it readable": "def is_nested(string):\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2"
    },
    {
        "input": "\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "tmp&_Rewrite to use more code to complete the same function": "import math\n\ndef sum_squares(lst):\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n\nprint(sum_squares([1,2,3])) # 14\nprint(sum_squares([1,4,9])) # 98\nprint(sum_squares([1,3,5,7])) # 84\nprint(sum_squares([1.4,4.2,0])) # 29\nprint(sum_squares([-2.4,1,1])) # 6",
        "final*_Rewrite to use less, concised code to complete this function": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(i)**2 for i in lst])",
        "tmp&_Write the code to make it less readable": "def s(lst):\n    import math\n    s=0\n    for i in lst:\n        s += math.ceil(i)**2\n    return s",
        "final*_Write the code to make it readable": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared"
    },
    {
        "input": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "tmp&_Rewrite to use more code to complete the same function": "def check_if_last_char_is_a_letter(txt):\n    check = txt.strip().split(' ')[-1]\n    if len(check) == 1:\n        if 97 <= ord(check.lower()) <= 122:\n            return True\n    return False\n\nprint(check_if_last_char_is_a_letter(\"apple pie\")) # False\nprint(check_if_last_char_is_a_letter(\"apple pi e\")) # True\nprint(check_if_last_char_is_a_letter(\"apple pi e \")) # False\nprint(check_if_last_char_is_a_letter(\"\")) # False",
        "final*_Rewrite to use less, concised code to complete this function": "def check_if_last_char_is_a_letter(txt):\n    return len(txt.split(' ')[-1]) == 1 and txt.split(' ')[-1].isalpha()",
        "tmp&_Write the code to make it less readable": "def ciflc(txt):return T if len(txt.split(' ')[-1]) == 1 and (97<=ord(txt.split(' ')[-1].lower())<=122) else F",
        "final*_Write the code to make it readable": "def check_if_last_char_is_a_letter(txt):\n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False"
    },
    {
        "input": "\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "tmp&_Rewrite to use more code to complete the same function": "def can_arrange(arr):\n    ind = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            ind = i\n    return ind",
        "final*_Rewrite to use less, concised code to complete this function": "def can_arrange(arr):\n    return next((i for i in range(1, len(arr)) if arr[i] < arr[i-1]), -1)",
        "tmp&_Write the code to make it less readable": "def can_arrange(arr):\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]: ind=i\n      i+=1\n    return ind",
        "final*_Write the code to make it readable": "def can_arrange(arr):\n    ind = -1\n    i = 1\n    while i < len(arr):\n        if arr[i] < arr[i-1]:\n            ind = i\n        i += 1\n    return ind"
    },
    {
        "input": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "tmp&_Rewrite to use more code to complete the same function": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    smallest = []\n    largest = []\n    for num in lst:\n        if num < 0:\n            smallest.append(num)\n        if num > 0:\n            largest.append(num)\n    if smallest:\n        largest_negative = max(smallest)\n    else:\n        largest_negative = None\n    if largest:\n        smallest_positive = min(largest)\n    else:\n        smallest_positive = None\n    return (largest_negative, smallest_positive)",
        "final*_Rewrite to use less, concised code to complete this function": "def largest_smallest_integers(lst):\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    return (max(negatives) if negatives else None, min(positives) if positives else None)",
        "tmp&_Write the code to make it less readable": "def lrg_sml_ints(lst):\n  ''' \n  Create a func that returns a tuple (a, b), where 'a' is the biggest of neg integers, and 'b' is the smallest\n  of pos integers in a list. If there is no neg or pos integers, return them as None.\n  Examples:\n  lrg_sml_ints([2, 4, 1, 3, 5, 7]) == (None, 1)\n  lrg_sml_ints([]) == (None, None)\n  lrg_sml_ints([0]) == (None, None)\n  '''\n  smlst = list(filter(lambda x: x < 0, lst))\n  lrgst = list(filter(lambda x: x > 0, lst))\n  return (max(smlst) if smlst else None, min(lrgst) if lrgst else None)",
        "final*_Write the code to make it readable": "def largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)"
    },
    {
        "input": "\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "tmp&_Rewrite to use more code to complete the same function": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    temp_a, temp_b = str(a), str(b)\n    if isinstance(a, int) or isinstance(b, int):\n        if isinstance(a, str) and a.isdigit(): temp_a = int(a)\n        if isinstance(b, str) and b.isdigit(): temp_b = int(b)\n        if temp_a == temp_b: return None\n        return a if temp_a > temp_b else b\n    elif isinstance(a, float) or isinstance(b, float):\n        if isinstance(a, str): temp_a = float(a.replace(',', '.'))\n        if isinstance(b, str): temp_b = float(b.replace(',', '.'))\n        if temp_a == temp_b: return None\n        return a if temp_a > temp_b else b\n    else:\n        if temp_a == temp_b: return None\n        return a if temp_a > temp_b else b",
        "final*_Rewrite to use less, concised code to complete this function": "def compare_one(a, b):\n    temp_a = str(a).replace(',', '.') if isinstance(a, str) else a\n    temp_b = str(b).replace(',', '.') if isinstance(b, str) else b\n    return a if float(temp_a) > float(temp_b) else b if float(temp_a) < float(temp_b) else None",
        "tmp&_Write the code to make it less readable": "def compare_one(a,b): temp_a,temp_b=a,b;i=type;temp=(lambda r:(lambda k=k->k(k))((lambda k:(lambda f,f1:(lambda :r(k(k)))(lambda _:f(f1(f1))))(lambda f:(lambda f1:(lambda a,b:None if a==b else a if a>b else b)([lambda r:i(r)==i(j)and r>j for i,j in zip(f,f1)])))(f))(float)) if i(temp_a)==str else lambda r:float;return temp(a)if temp(a)==temp(b)else a if temp(a)>temp(b)else b",
        "final*_Write the code to make it readable": "def compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str):\n        temp_a = temp_a.replace(',', '.')\n    if isinstance(temp_b, str):\n        temp_b = temp_b.replace(',', '.')\n    if float(temp_a) == float(temp_b):\n        return None\n    return a if float(temp_a) > float(temp_b) else b"
    },
    {
        "input": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    return n%2 == 0 and n >= 8\n",
        "tmp&_Rewrite to use more code to complete the same function": "def is_equal_to_sum_even(n):\n    return all(x%2 == 0 for x in range(2, n, 2)) and n >= 8",
        "final*_Rewrite to use less, concised code to complete this function": "def is_equal_to_sum_even(n):\n    return n%2 == 0 and n >= 8",
        "tmp&_Write the code to make it less readable": "dxxxxxxxxfxi#!/usr/bin/env python\n\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    return n%2==0 and n>=8",
        "final*_Write the code to make it readable": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n >= 8"
    },
    {
        "input": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "tmp&_Rewrite to use more code to complete the same function": "def special_factorial(n):\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n + 1):\n        j = 1\n        while j <= i:\n            fact_i *= j\n            j += 1\n        special_fact *= fact_i\n    return special_fact",
        "final*_Rewrite to use less, concised code to complete this function": "def special_factorial(n):\n    return 1 if n == 0 else special_factorial(n-1) * factorial(n-1) * n",
        "tmp&_Write the code to make it less readable": "def sf(n):\n    f=1\n    sf=1\n    for i in range(1,n+1):\n        f*=i\n        sf*=f\n    return sf",
        "final*_Write the code to make it readable": "def special_factorial(n):\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact"
    },
    {
        "input": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "tmp&_Rewrite to use more code to complete the same function": "def fix_spaces(text):\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    \n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"*(end - start)\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)\n            new_text += text[i]\n            start, end = i+1, i+1\n        i += 1\n    \n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    \n    return new_text",
        "final*_Rewrite to use less, concised code to complete this function": "def fix_spaces(text):\n    new_text = \"\"\n    consecutive_spaces = 0\n    \n    for i in range(len(text)):\n        if text[i] == \" \":\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                new_text += \"-\"\n        else:\n            if consecutive_spaces > 0:\n                new_text += \"_\" * consecutive_spaces\n            new_text += text[i]\n            consecutive_spaces = 0\n    \n    if consecutive_spaces > 2:\n        new_text += \"-\"\n    elif consecutive_spaces > 0:\n        new_text += \"_\"\n    \n    return new_text",
        "tmp&_Write the code to make it less readable": "def fix_spaces(text):new_text=\"\";i=0;start,end=0,0;while i<len(text):if text[i]==\" \":end+=1;else:if end-start>2:new_text+=\"-\"+text[i];elif end-start>0:new_text+=\"_\"*(end-start)+text[i];else:new_text+=text[i];start,end=i+1,i+1;i+=1;if end-start>2:new_text+=\"-\";elif end-start>0:new_text+=\"_\";return new_text",
        "final*_Write the code to make it readable": "def fix_spaces(text):\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\" + text[i]\n            elif end - start > 0:\n                new_text += \"_\" * (end - start) + text[i]\n            else:\n                new_text += text[i]\n            start, end = i + 1, i + 1\n        i += 1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text"
    },
    {
        "input": "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "tmp&_Rewrite to use more code to complete the same function": "def file_name_check(file_name):\n    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    digit_count = 0\n    for char in lst[0]:\n        if char.isdigit():\n            digit_count += 1\n    if digit_count > 3:\n        return 'No'\n    return 'Yes'",
        "final*_Rewrite to use less, concised code to complete this function": "def file_name_check(file_name):\n    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n\n    return 'Yes' if len(lst) == 2 and lst[1] in suf and len(lst[0]) > 0 and lst[0][0].isalpha() and len([x for x in lst[0] if x.isdigit()]) <= 3 else 'No'",
        "tmp&_Write the code to make it less readable": "d2XM5WU7a7yu7Yj8Uyh = \"\"\"\nykz = ['txt', 'exe', 'dll']\nV4b = ''.split(sep='.')\nif len(V4b) != 2:\n    return 'No'\nif not V4b[1] in ykz:\n    return 'No'\nif len(V4b[0]) == 0:\n    return 'No'\nif not V4b[0][0].isalpha():\n    return 'No'\nu7 = len([x for x in V4b[0] if x.isdigit()])\nif u7 > 3:\n    return 'No'\nreturn 'Yes'\n\"\"\"",
        "final*_Write the code to make it readable": "def file_name_check(file_name):\n    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if lst[1] not in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'"
    },
    {
        "input": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "tmp&_Rewrite to use more code to complete the same function": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i]**2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += lst[i]**3\n        else:\n            result += lst[i]\n    return result",
        "final*_Rewrite to use less, concised code to complete this function": "def sum_squares(lst):\n    return sum([lst[i]**2 if i % 3 == 0 else lst[i]**3 if i % 4 == 0 and i % 3 != 0 else lst[i] for i in range(len(lst))])",
        "tmp&_Write the code to make it less readable": "def ss(lst):\r\n    r =[]\r\n    for i in range(len(lst)):\r\n        if i %3 == 0:\r\n            r.append(lst[i]**2)\r\n        elif i % 4 == 0 and i%3 != 0:\r\n            r.append(lst[i]**3)\r\n        else:\r\n            r.append(lst[i])\r\n    return sum(r)",
        "final*_Write the code to make it readable": "def sum_squares(lst):\n    result = []\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result.append(lst[i] ** 2)\n        elif i % 4 == 0 and i % 3 != 0:\n            result.append(lst[i] ** 3)\n        else:\n            result.append(lst[i])\n    \n    return sum(result)"
    },
    {
        "input": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "tmp&_Rewrite to use more code to complete the same function": "def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_prime_words(sentence):\n        words = sentence.split()\n        prime_words = [word for word in words if is_prime(len(word))]\n        return \" \".join(prime_words)\n\n    return get_prime_words(sentence)",
        "final*_Rewrite to use less, concised code to complete this function": "def words_in_sentence(sentence):\n    new_lst = []\n    for word in sentence.split():\n        if len(word) == 1 or all(len(word) % i != 0 for i in range(2, len(word))):\n            new_lst.append(word)\n    return \" \".join(new_lst)",
        "tmp&_Write the code to make it less readable": "def w(sentence):\n    nw = []\n    for w in sentence.split():\n        f = 0\n        if len(w) == 1:\n            f = 1\n        for i in range(2, len(w)):\n            if len(w)%i == 0:\n                f = 1\n        if f == 0 or len(w) == 2:\n            nw.append(w)\n    return \" \".join(nw)",
        "final*_Write the code to make it readable": "def words_in_sentence(sentence):\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word) % i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)"
    },
    {
        "input": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n",
        "tmp&_Rewrite to use more code to complete the same function": "def simplify(x, n):\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    \n    if numerator % denom == 0:\n        return True\n    else:\n        return False",
        "final*_Rewrite to use less, concised code to complete this function": "def simplify(x, n):\n    a, b = map(int, x.split(\"/\"))\n    c, d = map(int, n.split(\"/\"))\n    numerator = a * c\n    denom = b * d\n    return numerator % denom == 0",
        "tmp&_Write the code to make it less readable": "d=4\na,d=a*4,a*2+a-enumerator//d*den-\nminator\nreturn Faesge",
        "final*_Write the code to make it readable": "def simplify(x, n):\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False"
    },
    {
        "input": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "tmp&_Rewrite to use more code to complete the same function": "def order_by_points(nums):\n    def digits_sum(n):\n        neg = 1\n        if n < 0:\n            n = -1 * n\n            neg = -1\n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    \n    sorted_nums = sorted(nums, key=digits_sum)\n    return sorted_nums",
        "final*_Rewrite to use less, concised code to complete this function": "def order_by_points(nums):\n    return sorted(nums, key=lambda n: sum(int(i) for i in str(abs(n))) * (-1 if n < 0 else 1))",
        "tmp&_Write the code to make it less readable": "def o_b_p(n):\n    def d_s(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(n, key=d_s)",
        "final*_Write the code to make it readable": "def order_by_points(nums):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: \n            n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    \n    return sorted(nums, key=digits_sum)"
    },
    {
        "input": "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "tmp&_Rewrite to use more code to complete the same function": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            first_digit = int(number_as_string[0])\n            last_digit = int(number_as_string[-1])\n            if first_digit in odd_digits and last_digit in odd_digits:\n                count += 1\n    return count",
        "final*_Rewrite to use less, concised code to complete this function": "def specialFilter(nums):\n    count = sum(1 for num in nums if num > 10 and str(num)[0] in \"13579\" and str(num)[-1] in \"13579\")\n    return count",
        "tmp&_Write the code to make it less readable": "def specialFilter(nums):count=0;for num in nums:if num>10:odd_digits=(1,3,5,7,9);number_as_string=str(num);if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:count+=1;return count",
        "final*_Write the code to make it readable": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n    return count"
    },
    {
        "input": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "tmp&_Rewrite to use more code to complete the same function": "def get_max_triples(n):\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    count += 1\n    return count",
        "final*_Rewrite to use less, concised code to complete this function": "def get_max_triples(n):\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = sum([(A[i]+A[j]+A[k])%3 == 0 for i in range(n) for j in range(i+1,n) for k in range(j+1,n)])\n    return ans",
        "tmp&_Write the code to make it less readable": "def get_max_triples(n):\n    A=[i*i-i+1 for i in range(1,n+1)]\n    ans=[]\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3==0:\n                    ans+=[(A[i],A[j],A[k])]\n    return len(ans)",
        "final*_Write the code to make it readable": "def get_max_triples(n):\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)"
    },
    {
        "input": "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "tmp&_Rewrite to use more code to complete the same function": "def bf(planet1, planet2):\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    \n    planets_between = []\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    \n    if planet1_index < planet2_index:\n        for i in range(planet1_index + 1, planet2_index):\n            planets_between.append(planet_names[i])\n    else:\n        for i in range(planet2_index + 1, planet1_index):\n            planets_between.append(planet_names[i])\n    \n    return tuple(planets_between)",
        "final*_Rewrite to use less, concised code to complete this function": "def bf(planet1, planet2):\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index, planet2_index = planet_names.index(planet1), planet_names.index(planet2)\n    return tuple(planet_names[min(planet1_index, planet2_index) + 1: max(planet1_index, planet2_index)])",
        "tmp&_Write the code to make it less readable": "def bf(p1, p2):'''8p=(\"Me\",\"Ve\",\"Ea\",\"Ma\",\"Ju\",\"Sa\",\"Ur\",\"Ne\")if p1 not in 8p or p2 not in 8p or p1==p2:return()i=8p.index(p1);j=8p.index(p2)if i<j:return(8p[i+1:j])else:return(8p[j+1:i])",
        "final*_Write the code to make it readable": "def find_planets_between(planet1, planet2):\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    \n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    \n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    \n    if planet1_index < planet2_index:\n        return planet_names[planet1_index + 1: planet2_index]\n    else:\n        return planet_names[planet2_index + 1 : planet1_index]"
    },
    {
        "input": "\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "tmp&_Rewrite to use more code to complete the same function": "def sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i) % 2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)",
        "final*_Rewrite to use less, concised code to complete this function": "def sorted_list_sum(lst):\n    return sorted([w for w in lst if len(w) % 2 == 0], key=lambda x: (len(x), x))",
        "tmp&_Write the code to make it less readable": "def slst(l):\n    l.sort()\n    n = []\n    for i in l:\n        if len(i)%2==0:\n            n.append(i)\n    return sorted(n,key=len)",
        "final*_Write the code to make it readable": "def sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i) % 2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)"
    },
    {
        "input": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "tmp&_Rewrite to use more code to complete the same function": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n\n# example tests\nprint(x_or_y(7, 34, 12))\nprint(x_or_y(15, 8, 5))",
        "final*_Rewrite to use less, concised code to complete this function": "def x_or_y(n, x, y):\n    if n == 1 or any(n % i == 0 for i in range(2, n)):\n        return y\n    return x",
        "tmp&_Write the code to make it less readable": "def x_or_y(n,x,y):if n==1:return y;for i in range(2,n):if n%i==0:return y;break;else:return x",
        "final*_Write the code to make it readable": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x"
    },
    {
        "input": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "tmp&_Rewrite to use more code to complete the same function": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    total_sum = 0\n    \n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            total_sum += num ** 2\n    \n    return total_sum",
        "final*_Rewrite to use less, concised code to complete this function": "def double_the_difference(lst):\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and isinstance(i, int)])",
        "tmp&_Write the code to make it less readable": "def double_the_difference(l):return sum([i**2 for i in l if i > 0 and i %2!=0 and \".\" not in str(i)])",
        "final*_Write the code to make it readable": "def double_the_difference(lst):\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])"
    },
    {
        "input": "\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "tmp&_Rewrite to use more code to complete the same function": "def compare(game,guess):\n    result = []\n    for x, y in zip(game, guess):\n        diff = abs(x - y)\n        result.append(diff)\n    return result",
        "final*_Rewrite to use less, concised code to complete this function": "def compare(game,guess):\n    return [abs(game[i]-guess[i]) for i in range(len(game))]",
        "tmp&_Write the code to make it less readable": "def c(game,guess):\n    return [abs(x-y)for x,y in zip(game,guess)]",
        "final*_Write the code to make it readable": "def compare(game, guess):\n    return [abs(x - y) for x, y in zip(game, guess)]"
    },
    {
        "input": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "tmp&_Rewrite to use more code to complete the same function": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans",
        "final*_Rewrite to use less, concised code to complete this function": "def Strongest_Extension(class_name, extensions):\n    strength = lambda x: sum([1 for c in x if c.isupper()]) - sum([1 for c in x if c.islower()])\n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\"",
        "tmp&_Write the code to make it less readable": "d=Str_-xm(class_-n,x_):\"_xl_=_ns[0]\ny-v=_el'n(x___xi___isapp__.s_p())n(n_.islp)\nf_s__f_s_ _s_\nml=_cl_n__m+ _ Um_.lm_r__s]_(x f__ in __ if x s r__ and _._)\nf_s__f_e\nvg=f_s_ m_l_}`",
        "final*_Write the code to make it readable": "def strongest_extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans"
    },
    {
        "input": "\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "tmp&_Rewrite to use more code to complete the same function": "def cycpattern_check(a, b):\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n\nprint(cycpattern_check(\"abcd\", \"abd\"))\nprint(cycpattern_check(\"hello\", \"ell\"))\nprint(cycpattern_check(\"whassup\", \"psus\"))\nprint(cycpattern_check(\"abab\", \"baa\"))\nprint(cycpattern_check(\"efef\", \"eeff\"))\nprint(cycpattern_check(\"himenss\", \"simen\"))",
        "final*_Rewrite to use less, concised code to complete this function": "def cycpattern_check(a, b):\n    l = len(b)\n    pat = b*2\n    return any(a[i:i+l] == pat[j:j+l] for i in range(len(a)-l+1) for j in range(l+1))",
        "tmp&_Write the code to make it less readable": "def c_p(a,b):l=len(b)pat=b+b;for i in range(len(a)-l+1):for j in range(l+1):if a[i:i+l]==pat[j:j+l]:return True;return False",
        "final*_Write the code to make it readable": "def cycpattern_check(a , b):\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False"
    },
    {
        "input": "\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "tmp&_Rewrite to use more code to complete the same function": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    \n    num_str = str(abs(num))\n    \n    for i in range(len(num_str)):\n        if int(num_str[i]) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return (even_count, odd_count)",
        "final*_Rewrite to use less, concised code to complete this function": "def even_odd_count(num):\n    even_count = sum(1 for i in str(abs(num)) if int(i) % 2 == 0)\n    odd_count = sum(1 for i in str(abs(num)) if int(i) % 2 != 0)\n    return (even_count, odd_count)",
        "tmp&_Write the code to make it less readable": "def even_odd_count(n):e=0;o=0;for i in str(abs(n)):if int(i)%2==0:e+=1;else:o+=1;return (e,o)",
        "final*_Write the code to make it readable": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"
    },
    {
        "input": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "tmp&_Rewrite to use more code to complete the same function": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n    sym = [\"i\", \"iv\", \"v\", \"ix\", \"x\", \"xl\", \"l\", \"xc\", \"c\", \"cd\", \"d\", \"cm\", \"m\"]\n    i = 12\n    res = \"\"\n    while number:\n        div = number // num[i]\n        number %= num[i]\n        while div:\n            res += sym[i]\n            div -= 1\n        i -= 1\n    return res",
        "final*_Rewrite to use less, concised code to complete this function": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000] \n    sym = [\"i\", \"iv\", \"v\", \"ix\", \"x\", \"xl\", \"l\", \"xc\", \"c\", \"cd\", \"d\", \"cm\", \"m\"] \n    res = ''\n    for i in reversed(range(13)):\n        div = number // num[i]\n        number %= num[i]\n        res += sym[i] * div\n    return res",
        "tmp&_Write the code to make it less readable": "def int_to_mini_roman(number):num=[1,4,5,9,10,40,50,90,100,400,500,900,1000]sym=[\"I\",\"IV\",\"V\",\"IX\",\"X\",\"XL\",\"L\",\"XC\",\"C\",\"CD\",\"D\",\"CM\",\"M\"]i=12res=''while number:div=number//num[i]number%=num[i]while div:res+=sym[i]div-=1i-=1return res.lower()",
        "final*_Write the code to make it readable": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"]\n    i = 12\n    res = ''\n    while number:\n        div = number // num[i]\n        number %= num[i]\n        while div:\n            res += sym[i]\n            div -= 1\n        i -= 1\n    return res.lower()"
    },
    {
        "input": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "tmp&_Rewrite to use more code to complete the same function": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    \n    # Check if any of the three combinations form a right-angled triangle\n    if a*a == b*b + c*c:\n        return True\n    elif b*b == a*a + c*c:\n        return True\n    elif c*c == a*a + b*b:\n        return True\n    \n    # If none of the combinations form a right-angled triangle, return False\n    return False",
        "final*_Rewrite to use less, concised code to complete this function": "def right_angle_triangle(a, b, c):\n    return any([a*a == b*b + c*c, b*b == a*a + c*c, c*c == a*a + b*b])",
        "tmp&_Write the code to make it less readable": "```\ndef r(a,b,c):return a*a==b*b+c*c or b*b==a*a+c*c or c*c==a*a+b*b\n```",
        "final*_Write the code to make it readable": "def is_right_angle_triangle(a, b, c):\n    return a * a == b * b + c * c or b * b == a * a + c * c or c * c == a * a + b * b"
    },
    {
        "input": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "tmp&_Rewrite to use more code to complete the same function": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    unique_chars = []\n    for word in words:\n        unique_chars.append((len(set(word)), word))\n    sorted_words = sorted(unique_chars, key = lambda x: (-x[0], x[1]))\n    return sorted_words[0][1]",
        "final*_Rewrite to use less, concised code to complete this function": "def find_max(words):\n    return min(words, key=lambda x: (-len(set(x)), x))",
        "tmp&_Write the code to make it less readable": "def f(x):return sorted(x,key=lambda x: (-len(set(x)), x))[0]",
        "final*_Write the code to make it readable": "def find_max(words):\n    return sorted(words, key=lambda x: (-len(set(x)), x))[0]"
    },
    {
        "input": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "tmp&_Rewrite to use more code to complete the same function": "def eat(number, need, remaining):\n    if need <= remaining:\n        total_eaten = number + need\n        carrots_left = remaining - need\n    else:\n        total_eaten = number + remaining\n        carrots_left = 0\n        \n    return [total_eaten, carrots_left]",
        "final*_Rewrite to use less, concised code to complete this function": "def eat(number, need, remaining):\n    return [number + min(need, remaining), max(0, remaining - need)]",
        "tmp&_Write the code to make it less readable": "def e(n, n, r):\n    if(n<=r): return [n+n, r-n]\n    else: return [n+r, 0]",
        "final*_Write the code to make it readable": "def eat(number, need, remaining):\n    if need <= remaining:\n        return [number + need, remaining-need]\n    else:\n        return [number + remaining, 0]"
    },
    {
        "input": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "tmp&_Rewrite to use more code to complete the same function": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(1, len(operand)):\n        expression += \" \" + operator[i-1] + \" \" + str(operand[i])\n    return eval(expression)",
        "final*_Rewrite to use less, concised code to complete this function": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression += oprt + str(oprn)\n    return eval(expression)",
        "tmp&_Write the code to make it less readable": "def da(op, opd):\n    expr= str(opd[0])\n    for o, o in zip(op, opd[1:]):\n        expr+= o+ str(o)\n    return ev(expr)",
        "final*_Write the code to make it readable": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression += oprt + str(oprn)\n    return eval(expression)"
    },
    {
        "input": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "tmp&_Rewrite to use more code to complete the same function": "def solve(s):\n    new_str = \"\"\n    has_letters = False\n    for i in s:\n        if i.isalpha():\n            new_str += i.swapcase()\n            has_letters = True\n        else:\n            new_str += i\n    if not has_letters:\n        return new_str[::-1]\n    return new_str",
        "final*_Rewrite to use less, concised code to complete this function": "def solve(s):\n    new_str = [i.swapcase() if i.isalpha() else i for i in s]\n    if not any(i.isalpha() for i in s):\n        return s[::-1]\n    return \"\".join(new_str)",
        "tmp&_Write the code to make it less readable": "def solve(s):flg=0;idx=0;new_str=list(s);for i in s:if i.isalpha():new_str[idx]=i.swapcase();flg=1;idx+=1;s=\"\";for i in new_str:s+=i;if flg==0:return s[len(s)::-1];return s",
        "final*_Write the code to make it readable": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s"
    },
    {
        "input": "\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "tmp&_Rewrite to use more code to complete the same function": "from typing import Optional\nimport hashlib\n\ndef string_to_md5(text: str) -> Optional[str]:\n    if text:\n        md5_hash = hashlib.md5(text.encode('ascii'))\n        return md5_hash.hexdigest()\n    else:\n        return None",
        "final*_Rewrite to use less, concised code to complete this function": "import hashlib\n\ndef string_to_md5(text):\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None",
        "tmp&_Write the code to make it less readable": "def stg_md5(t): import hashlib; return hashlib.md5(t.encode('ascii')).hexdigest() if t else None",
        "final*_Write the code to make it readable": "import hashlib\n\ndef string_to_md5(text):\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None"
    },
    {
        "input": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "tmp&_Rewrite to use more code to complete the same function": "def generate_integers(a, b):\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    result = []\n    for i in range(lower, upper+1):\n        if i % 2 == 0:\n            result.append(i)\n\n    return result",
        "final*_Rewrite to use less, concised code to complete this function": "def generate_integers(a, b):\n    return [i for i in range(max(2, min(a, b)), min(8, max(a, b))+1) if i % 2 == 0]",
        "tmp&_Write the code to make it less readable": "def g_i(a,b):l=max(2,min(a,b));u=min(8,max(a,b));return[i for i in range(l,u+1)if i % 2 == 0]",
        "final*_Write the code to make it readable": "def generate_integers(a, b):\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [i for i in range(lower, upper+1) if i % 2 == 0]"
    }
]